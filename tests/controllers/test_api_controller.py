# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from tests.test_helper import TestHelper
from tests.http_response_catcher import HttpResponseCatcher
from nucoroapiv2.api_helper import APIHelper
from nucoroapiv2.controllers.api_controller import ApiController


class ApiControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(ApiControllerTests, cls).setUpClass()
        cls.response_catcher = HttpResponseCatcher()
        cls.controller = ApiController(cls.config, cls.response_catcher)

    # OpenApi3 schema for this API. Format can be selected via content negotiation.
    #
    #- YAML: application/vnd.oai.openapi
    #- JSON: application/vnd.oai.openapi+json
    def test_api_schema_retrieve(self):
        # Parameters for the API call
        format = None
        lang = None

        # Perform the API call through the SDK function
        result = self.controller.api_schema_retrieve(format, lang)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/vnd.oai.openapi'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # OpenApi3 schema for this API. Format can be selected via content negotiation.
    #
    #- YAML: application/vnd.oai.openapi
    #- JSON: application/vnd.oai.openapi+json
    def test_api_schema_retrieve_1(self):
        # Parameters for the API call
        format = None
        lang = None

        # Perform the API call through the SDK function
        result = self.controller.api_schema_retrieve(format, lang)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/yaml'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # OpenApi3 schema for this API. Format can be selected via content negotiation.
    #
    #- YAML: application/vnd.oai.openapi
    #- JSON: application/vnd.oai.openapi+json
    def test_api_schema_retrieve_2(self):
        # Parameters for the API call
        format = None
        lang = None

        # Perform the API call through the SDK function
        result = self.controller.api_schema_retrieve(format, lang)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/vnd.oai.openapi+json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # OpenApi3 schema for this API. Format can be selected via content negotiation.
    #
    #- YAML: application/vnd.oai.openapi
    #- JSON: application/vnd.oai.openapi+json
    def test_api_schema_retrieve_3(self):
        # Parameters for the API call
        format = None
        lang = None

        # Perform the API call through the SDK function
        result = self.controller.api_schema_retrieve(format, lang)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_advice_engines_ets_categories_list
    def test_api_v_2_advice_engines_ets_categories_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_advice_engines_ets_categories_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_advice_engines_ets_core_category_groups_list
    def test_api_v_2_advice_engines_ets_core_category_groups_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_advice_engines_ets_core_category_groups_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_advice_engines_ets_preset_category_groups_list
    def test_api_v_2_advice_engines_ets_preset_category_groups_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_advice_engines_ets_preset_category_groups_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_advice_engines_model_portfolio_model_portfolios_list
    def test_api_v_2_advice_engines_model_portfolio_model_portfolios_list(self):
        # Parameters for the API call
        extra_data = None
        limit = None
        name = None
        offset = None
        risk_higher = None
        risk_level = None
        risk_lower = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_advice_engines_model_portfolio_model_portfolios_list(extra_data, limit, name, offset, risk_higher, risk_level, risk_lower)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # A list of Assets filtered by category codes.
    #Default is an empty dict which returns the whole universe.
    def test_api_v_2_assets_list(self):
        # Parameters for the API call
        asset_type = None
        category_code = None
        category_type = None
        currency = None
        isin = None
        limit = None
        market = None
        name = None
        offset = None
        status = None
        ticker = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_assets_list(asset_type, category_code, category_type, currency, isin, limit, market, name, offset, status, ticker)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Retrieve all asset categories
    def test_api_v_2_assets_categories_list(self):
        # Parameters for the API call
        limit = None
        offset = None
        mtype = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_assets_categories_list(limit, offset, mtype)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_billing_invoices_list
    def test_api_v_2_billing_invoices_list(self):
        # Parameters for the API call
        date_from = None
        date_to = None
        limit = None
        offset = None
        status = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_billing_invoices_list(date_from, date_to, limit, offset, status)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Request e-mail account verification notification.
    def test_api_v_2_clients_me_verify_email_create(self):
        # Parameters for the API call
        email = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_clients_me_verify_email_create(email)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_clients_national_documents_list
    def test_api_v_2_clients_national_documents_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_clients_national_documents_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Retrieves the latest access to the client's account
    def test_api_v_2_feeds_access_logs_list(self):
        # Parameters for the API call
        browser = None
        browser_version = None
        channel = None
        city = None
        country = None
        device_brand = None
        device_model = None
        ip_address = None
        limit = None
        offset = None
        os = None
        os_version = None
        user_agent = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_feeds_access_logs_list(browser, browser_version, channel, city, country, device_brand, device_model, ip_address, limit, offset, os, os_version, user_agent)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_feeds_activities_list
    def test_api_v_2_feeds_activities_list(self):
        # Parameters for the API call
        limit = None
        offset = None
        target = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_feeds_activities_list(limit, offset, target)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # get:
    #List all conversations with last_message of a user
    #
    #post:
    #Create new conversation with N messages (without attachments)
    def test_api_v_2_inbox_conversations_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_inbox_conversations_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_platform_settings_list
    def test_api_v_2_platform_settings_list(self):

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_platform_settings_list()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Retrieves the list of countries
    def test_api_v_2_portal_countries_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_portal_countries_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_portal_settings_retrieve
    def test_api_v_2_portal_settings_retrieve(self):

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_portal_settings_retrieve()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # List all ToS for the current Portal
    def test_api_v_2_portal_tos_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_portal_tos_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Retrieves the current ToS for the Portal
    def test_api_v_2_portal_tos_current_retrieve(self):

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_portal_tos_current_retrieve()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_portfolios_portfoliotypes_list
    def test_api_v_2_portfolios_portfoliotypes_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_portfolios_portfoliotypes_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_relationship_manager_me_retrieve
    def test_api_v_2_relationship_manager_me_retrieve(self):

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_relationship_manager_me_retrieve()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Testcase for testing endpoint api_v2_risk_questions_list
    def test_api_v_2_risk_questions_list(self):
        # Parameters for the API call
        limit = None
        offset = None

        # Perform the API call through the SDK function
        result = self.controller.api_v_2_risk_questions_list(limit, offset)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


