# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.models.related_asset_serializer_with_asset_categories import RelatedAssetSerializerWithAssetCategories


class CreateOrder(object):

    """Implementation of the 'CreateOrder' model.

    A ModelSerializer that takes additional arguments for
    "fields", "omit" and "expand" in order to
    control which fields are displayed, and whether to replace simple
    values with complex, nested serializations

    Attributes:
        shares (int): TODO: type description here.
        asset (RelatedAssetSerializerWithAssetCategories): Allow get asset by
            multiple params or UUID
        portfolio (string): TODO: type description here.
        order_type (OrderTypeEnum): TODO: type description here.
        method (CreateOrderMethodEnum): TODO: type description here.
        limit_price (float): TODO: type description here.
        stop_price (float): TODO: type description here.
        duration (DurationEnum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "shares": 'shares',
        "asset": 'asset',
        "order_type": 'order_type',
        "method": 'method',
        "portfolio": 'portfolio',
        "limit_price": 'limit_price',
        "stop_price": 'stop_price',
        "duration": 'duration'
    }

    def __init__(self,
                 shares=None,
                 asset=None,
                 order_type=None,
                 method=None,
                 portfolio=None,
                 limit_price=None,
                 stop_price=None,
                 duration=None):
        """Constructor for the CreateOrder class"""

        # Initialize members of the class
        self.shares = shares
        self.asset = asset
        self.portfolio = portfolio
        self.order_type = order_type
        self.method = method
        self.limit_price = limit_price
        self.stop_price = stop_price
        self.duration = duration

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        shares = dictionary.get('shares')
        asset = RelatedAssetSerializerWithAssetCategories.from_dictionary(dictionary.get('asset')) if dictionary.get('asset') else None
        order_type = dictionary.get('order_type')
        method = dictionary.get('method')
        portfolio = dictionary.get('portfolio')
        limit_price = dictionary.get('limit_price')
        stop_price = dictionary.get('stop_price')
        duration = dictionary.get('duration')

        # Return an object of this model
        return cls(shares,
                   asset,
                   order_type,
                   method,
                   portfolio,
                   limit_price,
                   stop_price,
                   duration)
