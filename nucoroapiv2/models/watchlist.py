# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.models.related_asset_serializer_with_permission import RelatedAssetSerializerWithPermission


class Watchlist(object):

    """Implementation of the 'Watchlist' model.

    A ModelSerializer that takes additional arguments for
    "fields", "omit" and "expand" in order to
    control which fields are displayed, and whether to replace simple
    values with complex, nested serializations

    Attributes:
        uuid (uuid|string): TODO: type description here.
        name (string): TODO: type description here.
        assets (list of RelatedAssetSerializerWithPermission): TODO: type
            description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "name": 'name',
        "assets": 'assets'
    }

    def __init__(self,
                 uuid=None,
                 name=None,
                 assets=None):
        """Constructor for the Watchlist class"""

        # Initialize members of the class
        self.uuid = uuid
        self.name = name
        self.assets = assets

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        name = dictionary.get('name')
        assets = None
        if dictionary.get('assets') is not None:
            assets = [RelatedAssetSerializerWithPermission.from_dictionary(x) for x in dictionary.get('assets')]

        # Return an object of this model
        return cls(uuid,
                   name,
                   assets)
