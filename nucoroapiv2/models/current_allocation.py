# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.api_helper import APIHelper
from nucoroapiv2.models.position import Position


class CurrentAllocation(object):

    """Implementation of the 'CurrentAllocation' model.

    TODO: type model description here.

    Attributes:
        cash_active (float): TODO: type description here.
        balance (float): TODO: type description here.
        invested (float): TODO: type description here.
        earnings (float): TODO: type description here.
        positions (list of Position): TODO: type description here.
        valuation_datetime (datetime): TODO: type description here.
        performance (float): TODO: type description here.
        trade_total (float): TODO: type description here.
        cash_available (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cash_active": 'cash_active',
        "balance": 'balance',
        "invested": 'invested',
        "earnings": 'earnings',
        "positions": 'positions',
        "valuation_datetime": 'valuation_datetime',
        "trade_total": 'trade_total',
        "cash_available": 'cash_available',
        "performance": 'performance'
    }

    def __init__(self,
                 cash_active=None,
                 balance=None,
                 invested=None,
                 earnings=None,
                 positions=None,
                 valuation_datetime=None,
                 trade_total=None,
                 cash_available=None,
                 performance=0):
        """Constructor for the CurrentAllocation class"""

        # Initialize members of the class
        self.cash_active = cash_active
        self.balance = balance
        self.invested = invested
        self.earnings = earnings
        self.positions = positions
        self.valuation_datetime = APIHelper.RFC3339DateTime(valuation_datetime) if valuation_datetime else None
        self.performance = performance
        self.trade_total = trade_total
        self.cash_available = cash_available

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        cash_active = dictionary.get('cash_active')
        balance = dictionary.get('balance')
        invested = dictionary.get('invested')
        earnings = dictionary.get('earnings')
        positions = None
        if dictionary.get('positions') is not None:
            positions = [Position.from_dictionary(x) for x in dictionary.get('positions')]
        valuation_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("valuation_datetime")).datetime if dictionary.get("valuation_datetime") else None
        trade_total = dictionary.get('trade_total')
        cash_available = dictionary.get('cash_available')
        performance = dictionary.get("performance") if dictionary.get("performance") else 0

        # Return an object of this model
        return cls(cash_active,
                   balance,
                   invested,
                   earnings,
                   positions,
                   valuation_datetime,
                   trade_total,
                   cash_available,
                   performance)
