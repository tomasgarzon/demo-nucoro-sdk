# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class PatchedAddressUpdate(object):

    """Implementation of the 'PatchedAddressUpdate' model.

    TODO: type model description here.

    Attributes:
        uuid (uuid|string): TODO: type description here.
        line_1 (string): TODO: type description here.
        line_2 (string): TODO: type description here.
        postcode (string): TODO: type description here.
        locality (string): TODO: type description here.
        country (string): TODO: type description here.
        region (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "line_1": 'line1',
        "line_2": 'line2',
        "postcode": 'postcode',
        "locality": 'locality',
        "country": 'country',
        "region": 'region'
    }

    def __init__(self,
                 uuid=None,
                 line_1=None,
                 line_2=None,
                 postcode=None,
                 locality=None,
                 country=None,
                 region=None):
        """Constructor for the PatchedAddressUpdate class"""

        # Initialize members of the class
        self.uuid = uuid
        self.line_1 = line_1
        self.line_2 = line_2
        self.postcode = postcode
        self.locality = locality
        self.country = country
        self.region = region

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        line_1 = dictionary.get('line1')
        line_2 = dictionary.get('line2')
        postcode = dictionary.get('postcode')
        locality = dictionary.get('locality')
        country = dictionary.get('country')
        region = dictionary.get('region')

        # Return an object of this model
        return cls(uuid,
                   line_1,
                   line_2,
                   postcode,
                   locality,
                   country,
                   region)
