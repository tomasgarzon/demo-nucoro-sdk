# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.api_helper import APIHelper


class PortfolioPerformancePositions(object):

    """Implementation of the 'PortfolioPerformancePositions' model.

    TODO: type model description here.

    Attributes:
        valuation_datetime (datetime): TODO: type description here.
        last_update (datetime): TODO: type description here.
        asset (string): TODO: type description here.
        shares (float): TODO: type description here.
        price (float): TODO: type description here.
        currency (string): TODO: type description here.
        weight (float): TODO: type description here.
        fx_rate_account (float): TODO: type description here.
        asset_currency_value (float): TODO: type description here.
        value (float): TODO: type description here.
        position_return (float): TODO: type description here.
        unrealised_pl (float): TODO: type description here.
        realised_pl (float): TODO: type description here.
        earnings (float): TODO: type description here.
        avg_entry_price (float): TODO: type description here.
        daily_pl (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "valuation_datetime": 'valuation_datetime',
        "last_update": 'last_update',
        "asset": 'asset',
        "shares": 'shares',
        "price": 'price',
        "currency": 'currency',
        "value": 'value',
        "position_return": 'position_return',
        "unrealised_pl": 'unrealised_pl',
        "realised_pl": 'realised_pl',
        "earnings": 'earnings',
        "avg_entry_price": 'avg_entry_price',
        "daily_pl": 'daily_pl',
        "weight": 'weight',
        "fx_rate_account": 'fx_rate_account',
        "asset_currency_value": 'asset_currency_value'
    }

    def __init__(self,
                 valuation_datetime=None,
                 last_update=None,
                 asset=None,
                 shares=None,
                 price=None,
                 currency=None,
                 value=None,
                 position_return=None,
                 unrealised_pl=None,
                 realised_pl=None,
                 earnings=None,
                 avg_entry_price=None,
                 daily_pl=None,
                 weight=None,
                 fx_rate_account=None,
                 asset_currency_value=None):
        """Constructor for the PortfolioPerformancePositions class"""

        # Initialize members of the class
        self.valuation_datetime = APIHelper.RFC3339DateTime(valuation_datetime) if valuation_datetime else None
        self.last_update = APIHelper.RFC3339DateTime(last_update) if last_update else None
        self.asset = asset
        self.shares = shares
        self.price = price
        self.currency = currency
        self.weight = weight
        self.fx_rate_account = fx_rate_account
        self.asset_currency_value = asset_currency_value
        self.value = value
        self.position_return = position_return
        self.unrealised_pl = unrealised_pl
        self.realised_pl = realised_pl
        self.earnings = earnings
        self.avg_entry_price = avg_entry_price
        self.daily_pl = daily_pl

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        valuation_datetime = APIHelper.RFC3339DateTime.from_value(dictionary.get("valuation_datetime")).datetime if dictionary.get("valuation_datetime") else None
        last_update = APIHelper.RFC3339DateTime.from_value(dictionary.get("last_update")).datetime if dictionary.get("last_update") else None
        asset = dictionary.get('asset')
        shares = dictionary.get('shares')
        price = dictionary.get('price')
        currency = dictionary.get('currency')
        value = dictionary.get('value')
        position_return = dictionary.get('position_return')
        unrealised_pl = dictionary.get('unrealised_pl')
        realised_pl = dictionary.get('realised_pl')
        earnings = dictionary.get('earnings')
        avg_entry_price = dictionary.get('avg_entry_price')
        daily_pl = dictionary.get('daily_pl')
        weight = dictionary.get('weight')
        fx_rate_account = dictionary.get('fx_rate_account')
        asset_currency_value = dictionary.get('asset_currency_value')

        # Return an object of this model
        return cls(valuation_datetime,
                   last_update,
                   asset,
                   shares,
                   price,
                   currency,
                   value,
                   position_return,
                   unrealised_pl,
                   realised_pl,
                   earnings,
                   avg_entry_price,
                   daily_pl,
                   weight,
                   fx_rate_account,
                   asset_currency_value)
