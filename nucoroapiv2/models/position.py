# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.models.related_asset_serializer_with_asset_categories import RelatedAssetSerializerWithAssetCategories


class Position(object):

    """Implementation of the 'Position' model.

    TODO: type model description here.

    Attributes:
        asset (RelatedAssetSerializerWithAssetCategories): TODO: type
            description here.
        shares (float): TODO: type description here.
        price (float): TODO: type description here.
        value (float): TODO: type description here.
        weight (float): TODO: type description here.
        fx_rate_account (float): TODO: type description here.
        asset_currency_value (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asset": 'asset',
        "shares": 'shares',
        "price": 'price',
        "value": 'value',
        "weight": 'weight',
        "fx_rate_account": 'fx_rate_account',
        "asset_currency_value": 'asset_currency_value'
    }

    def __init__(self,
                 asset=None,
                 shares=None,
                 price=None,
                 value=None,
                 weight=None,
                 fx_rate_account=None,
                 asset_currency_value=None):
        """Constructor for the Position class"""

        # Initialize members of the class
        self.asset = asset
        self.shares = shares
        self.price = price
        self.value = value
        self.weight = weight
        self.fx_rate_account = fx_rate_account
        self.asset_currency_value = asset_currency_value

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        asset = RelatedAssetSerializerWithAssetCategories.from_dictionary(dictionary.get('asset')) if dictionary.get('asset') else None
        shares = dictionary.get('shares')
        price = dictionary.get('price')
        value = dictionary.get('value')
        weight = dictionary.get('weight')
        fx_rate_account = dictionary.get('fx_rate_account')
        asset_currency_value = dictionary.get('asset_currency_value')

        # Return an object of this model
        return cls(asset,
                   shares,
                   price,
                   value,
                   weight,
                   fx_rate_account,
                   asset_currency_value)
