# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.api_helper import APIHelper
from nucoroapiv2.models.currency import Currency
from nucoroapiv2.models.related_asset_serializer_with_asset_categories import RelatedAssetSerializerWithAssetCategories


class OrderList(object):

    """Implementation of the 'OrderList' model.

    A ModelSerializer that takes additional arguments for
    "fields", "omit" and "expand" in order to
    control which fields are displayed, and whether to replace simple
    values with complex, nested serializations

    Attributes:
        asset (RelatedAssetSerializerWithAssetCategories): TODO: type
            description here.
        trade (string): TODO: type description here.
        order_type (OrderTypeEnum): TODO: type description here.
        method (OrderListMethodEnum): TODO: type description here.
        status (OrderListStatusEnum): TODO: type description here.
        reason (string): TODO: type description here.
        completed (datetime): TODO: type description here.
        rebalance (string): TODO: type description here.
        portfolio (string): TODO: type description here.
        shares (float): TODO: type description here.
        amount (float): TODO: type description here.
        price_avg (float): TODO: type description here.
        currency (Currency): TODO: type description here.
        withdrawal (string): TODO: type description here.
        created (datetime): TODO: type description here.
        stop_price (float): TODO: type description here.
        limit_price (float): TODO: type description here.
        duration (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "asset": 'asset',
        "trade": 'trade',
        "order_type": 'order_type',
        "method": 'method',
        "status": 'status',
        "reason": 'reason',
        "completed": 'completed',
        "rebalance": 'rebalance',
        "portfolio": 'portfolio',
        "shares": 'shares',
        "amount": 'amount',
        "price_avg": 'price_avg',
        "currency": 'currency',
        "withdrawal": 'withdrawal',
        "created": 'created',
        "duration": 'duration',
        "stop_price": 'stop_price',
        "limit_price": 'limit_price'
    }

    def __init__(self,
                 asset=None,
                 trade=None,
                 order_type=None,
                 method=None,
                 status=None,
                 reason=None,
                 completed=None,
                 rebalance=None,
                 portfolio=None,
                 shares=None,
                 amount=None,
                 price_avg=None,
                 currency=None,
                 withdrawal=None,
                 created=None,
                 duration=None,
                 stop_price=None,
                 limit_price=None):
        """Constructor for the OrderList class"""

        # Initialize members of the class
        self.asset = asset
        self.trade = trade
        self.order_type = order_type
        self.method = method
        self.status = status
        self.reason = reason
        self.completed = APIHelper.RFC3339DateTime(completed) if completed else None
        self.rebalance = rebalance
        self.portfolio = portfolio
        self.shares = shares
        self.amount = amount
        self.price_avg = price_avg
        self.currency = currency
        self.withdrawal = withdrawal
        self.created = APIHelper.RFC3339DateTime(created) if created else None
        self.stop_price = stop_price
        self.limit_price = limit_price
        self.duration = duration

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        asset = RelatedAssetSerializerWithAssetCategories.from_dictionary(dictionary.get('asset')) if dictionary.get('asset') else None
        trade = dictionary.get('trade')
        order_type = dictionary.get('order_type')
        method = dictionary.get('method')
        status = dictionary.get('status')
        reason = dictionary.get('reason')
        completed = APIHelper.RFC3339DateTime.from_value(dictionary.get("completed")).datetime if dictionary.get("completed") else None
        rebalance = dictionary.get('rebalance')
        portfolio = dictionary.get('portfolio')
        shares = dictionary.get('shares')
        amount = dictionary.get('amount')
        price_avg = dictionary.get('price_avg')
        currency = Currency.from_dictionary(dictionary.get('currency')) if dictionary.get('currency') else None
        withdrawal = dictionary.get('withdrawal')
        created = APIHelper.RFC3339DateTime.from_value(dictionary.get("created")).datetime if dictionary.get("created") else None
        duration = dictionary.get('duration')
        stop_price = dictionary.get('stop_price')
        limit_price = dictionary.get('limit_price')

        # Return an object of this model
        return cls(asset,
                   trade,
                   order_type,
                   method,
                   status,
                   reason,
                   completed,
                   rebalance,
                   portfolio,
                   shares,
                   amount,
                   price_avg,
                   currency,
                   withdrawal,
                   created,
                   duration,
                   stop_price,
                   limit_price)
