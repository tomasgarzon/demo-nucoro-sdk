# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.models.allocation_by_code import AllocationByCode


class AllocationByAsset(object):

    """Implementation of the 'AllocationByAsset' model.

    TODO: type model description here.

    Attributes:
        category_code (string): TODO: type description here.
        display_allocation_chart (bool): TODO: type description here.
        display_allocation_chart_configuration_error (bool): TODO: type
            description here.
        allocations_by_code (list of AllocationByCode): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "category_code": 'category_code',
        "display_allocation_chart": 'display_allocation_chart',
        "display_allocation_chart_configuration_error": 'display_allocation_chart_configuration_error',
        "allocations_by_code": 'allocations_by_code'
    }

    def __init__(self,
                 category_code=None,
                 display_allocation_chart=None,
                 display_allocation_chart_configuration_error=None,
                 allocations_by_code=None):
        """Constructor for the AllocationByAsset class"""

        # Initialize members of the class
        self.category_code = category_code
        self.display_allocation_chart = display_allocation_chart
        self.display_allocation_chart_configuration_error = display_allocation_chart_configuration_error
        self.allocations_by_code = allocations_by_code

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        category_code = dictionary.get('category_code')
        display_allocation_chart = dictionary.get('display_allocation_chart')
        display_allocation_chart_configuration_error = dictionary.get('display_allocation_chart_configuration_error')
        allocations_by_code = None
        if dictionary.get('allocations_by_code') is not None:
            allocations_by_code = [AllocationByCode.from_dictionary(x) for x in dictionary.get('allocations_by_code')]

        # Return an object of this model
        return cls(category_code,
                   display_allocation_chart,
                   display_allocation_chart_configuration_error,
                   allocations_by_code)
