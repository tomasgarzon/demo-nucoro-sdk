# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.api_helper import APIHelper


class FeedActivityList(object):

    """Implementation of the 'FeedActivityList' model.

    A ModelSerializer that takes additional arguments for
    "fields", "omit" and "expand" in order to
    control which fields are displayed, and whether to replace simple
    values with complex, nested serializations

    Attributes:
        uuid (uuid|string): TODO: type description here.
        created (datetime): TODO: type description here.
        activity_type (ActivityTypeEnum): TODO: type description here.
        activity_data (dict): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "created": 'created',
        "activity_type": 'activity_type',
        "activity_data": 'activity_data'
    }

    def __init__(self,
                 uuid=None,
                 created=None,
                 activity_type=None,
                 activity_data=None):
        """Constructor for the FeedActivityList class"""

        # Initialize members of the class
        self.uuid = uuid
        self.created = APIHelper.RFC3339DateTime(created) if created else None
        self.activity_type = activity_type
        self.activity_data = activity_data

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        created = APIHelper.RFC3339DateTime.from_value(dictionary.get("created")).datetime if dictionary.get("created") else None
        activity_type = dictionary.get('activity_type')
        activity_data = dictionary.get('activity_data')

        # Return an object of this model
        return cls(uuid,
                   created,
                   activity_type,
                   activity_data)
