# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Rebalance(object):

    """Implementation of the 'Rebalance' model.

    A ModelSerializer that takes additional arguments for
    "fields", "omit" and "expand" in order to
    control which fields are displayed, and whether to replace simple
    values with complex, nested serializations

    Attributes:
        uuid (uuid|string): TODO: type description here.
        status (RebalanceStatusEnum): TODO: type description here.
        reason (string): Cancelled reason
        broker_orders (list of string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "status": 'status',
        "reason": 'reason',
        "broker_orders": 'broker_orders'
    }

    def __init__(self,
                 uuid=None,
                 status=None,
                 reason=None,
                 broker_orders=None):
        """Constructor for the Rebalance class"""

        # Initialize members of the class
        self.uuid = uuid
        self.status = status
        self.reason = reason
        self.broker_orders = broker_orders

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        status = dictionary.get('status')
        reason = dictionary.get('reason')
        broker_orders = dictionary.get('broker_orders')

        # Return an object of this model
        return cls(uuid,
                   status,
                   reason,
                   broker_orders)
