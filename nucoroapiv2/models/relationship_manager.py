# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class RelationshipManager(object):

    """Implementation of the 'RelationshipManager' model.

    TODO: type model description here.

    Attributes:
        uuid (uuid|string): TODO: type description here.
        first_name (string): TODO: type description here.
        last_name (string): TODO: type description here.
        phone_number (string): TODO: type description here.
        email (string): TODO: type description here.
        photo (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "email": 'email',
        "first_name": 'first_name',
        "last_name": 'last_name',
        "phone_number": 'phone_number',
        "photo": 'photo'
    }

    def __init__(self,
                 uuid=None,
                 email=None,
                 first_name=None,
                 last_name=None,
                 phone_number=None,
                 photo=None):
        """Constructor for the RelationshipManager class"""

        # Initialize members of the class
        self.uuid = uuid
        self.first_name = first_name
        self.last_name = last_name
        self.phone_number = phone_number
        self.email = email
        self.photo = photo

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        email = dictionary.get('email')
        first_name = dictionary.get('first_name')
        last_name = dictionary.get('last_name')
        phone_number = dictionary.get('phone_number')
        photo = dictionary.get('photo')

        # Return an object of this model
        return cls(uuid,
                   email,
                   first_name,
                   last_name,
                   phone_number,
                   photo)
