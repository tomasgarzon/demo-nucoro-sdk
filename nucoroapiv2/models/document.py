# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Document(object):

    """Implementation of the 'Document' model.

    TODO: type model description here.

    Attributes:
        uuid (uuid|string): TODO: type description here.
        name (string): TODO: type description here.
        doc_type (DocTypeEnum): TODO: type description here.
        description (string): TODO: type description here.
        path (string): TODO: type description here.
        extra_data (dict): Additional document attributes for the specific
            portal

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "name": 'name',
        "doc_type": 'doc_type',
        "path": 'path',
        "description": 'description',
        "extra_data": 'extra_data'
    }

    def __init__(self,
                 uuid=None,
                 name=None,
                 doc_type=None,
                 path=None,
                 description=None,
                 extra_data=None):
        """Constructor for the Document class"""

        # Initialize members of the class
        self.uuid = uuid
        self.name = name
        self.doc_type = doc_type
        self.description = description
        self.path = path
        self.extra_data = extra_data

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        name = dictionary.get('name')
        doc_type = dictionary.get('doc_type')
        path = dictionary.get('path')
        description = dictionary.get('description')
        extra_data = dictionary.get('extra_data')

        # Return an object of this model
        return cls(uuid,
                   name,
                   doc_type,
                   path,
                   description,
                   extra_data)
