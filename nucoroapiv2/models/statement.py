# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from nucoroapiv2.api_helper import APIHelper


class Statement(object):

    """Implementation of the 'Statement' model.

    TODO: type model description here.

    Attributes:
        uuid (uuid|string): TODO: type description here.
        date_from (date): TODO: type description here.
        date_to (date): TODO: type description here.
        created (datetime): TODO: type description here.
        status (Status181Enum): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "date_from": 'date_from',
        "date_to": 'date_to',
        "created": 'created',
        "status": 'status'
    }

    def __init__(self,
                 uuid=None,
                 date_from=None,
                 date_to=None,
                 created=None,
                 status=None):
        """Constructor for the Statement class"""

        # Initialize members of the class
        self.uuid = uuid
        self.date_from = date_from
        self.date_to = date_to
        self.created = APIHelper.RFC3339DateTime(created) if created else None
        self.status = status

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        date_from = dateutil.parser.parse(dictionary.get('date_from')).date() if dictionary.get('date_from') else None
        date_to = dateutil.parser.parse(dictionary.get('date_to')).date() if dictionary.get('date_to') else None
        created = APIHelper.RFC3339DateTime.from_value(dictionary.get("created")).datetime if dictionary.get("created") else None
        status = dictionary.get('status')

        # Return an object of this model
        return cls(uuid,
                   date_from,
                   date_to,
                   created,
                   status)
