# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from nucoroapiv2.api_helper import APIHelper


class PatchedInvestorFee(object):

    """Implementation of the 'PatchedInvestorFee' model.

    TODO: type model description here.

    Attributes:
        value (float): Determinates a percentage or an amount (between 0 and 1
            if percentage otherwise Positive Decimal)
        value_unit (ValueUnitEnum): Determines the type of the value(Fixed,
            Percentage)
        fee_type (FeeTypeEnum): Each choice should have a related method on
            fee model that contains the logic to charge the client
        concept (string): Describes the concept that will be shown on invoice
        date_from (date): Defines the end date when the percentage should be
            applied
        date_to (date): Defines the start date when the percentage should be
            applied
        amount_from (float): Defines the amount start range when the
            percentage should be applied
        amount_to (float): Defines the amount end range when the percentage
            should be applied
        uuid (uuid|string): TODO: type description here.
        created (datetime): TODO: type description here.
        updated (datetime): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "value": 'value',
        "value_unit": 'value_unit',
        "fee_type": 'fee_type',
        "concept": 'concept',
        "date_from": 'date_from',
        "date_to": 'date_to',
        "amount_from": 'amount_from',
        "amount_to": 'amount_to',
        "uuid": 'uuid',
        "created": 'created',
        "updated": 'updated'
    }

    def __init__(self,
                 value=None,
                 value_unit=None,
                 fee_type=None,
                 concept=None,
                 date_from=None,
                 date_to=None,
                 amount_from=None,
                 amount_to=None,
                 uuid=None,
                 created=None,
                 updated=None):
        """Constructor for the PatchedInvestorFee class"""

        # Initialize members of the class
        self.value = value
        self.value_unit = value_unit
        self.fee_type = fee_type
        self.concept = concept
        self.date_from = date_from
        self.date_to = date_to
        self.amount_from = amount_from
        self.amount_to = amount_to
        self.uuid = uuid
        self.created = APIHelper.RFC3339DateTime(created) if created else None
        self.updated = APIHelper.RFC3339DateTime(updated) if updated else None

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        value = dictionary.get('value')
        value_unit = dictionary.get('value_unit')
        fee_type = dictionary.get('fee_type')
        concept = dictionary.get('concept')
        date_from = dateutil.parser.parse(dictionary.get('date_from')).date() if dictionary.get('date_from') else None
        date_to = dateutil.parser.parse(dictionary.get('date_to')).date() if dictionary.get('date_to') else None
        amount_from = dictionary.get('amount_from')
        amount_to = dictionary.get('amount_to')
        uuid = dictionary.get('uuid')
        created = APIHelper.RFC3339DateTime.from_value(dictionary.get("created")).datetime if dictionary.get("created") else None
        updated = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated")).datetime if dictionary.get("updated") else None

        # Return an object of this model
        return cls(value,
                   value_unit,
                   fee_type,
                   concept,
                   date_from,
                   date_to,
                   amount_from,
                   amount_to,
                   uuid,
                   created,
                   updated)
