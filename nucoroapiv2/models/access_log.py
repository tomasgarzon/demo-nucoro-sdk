# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.api_helper import APIHelper


class AccessLog(object):

    """Implementation of the 'AccessLog' model.

    A ModelSerializer that takes additional arguments for
    "fields", "omit" and "expand" in order to
    control which fields are displayed, and whether to replace simple
    values with complex, nested serializations

    Attributes:
        uuid (uuid|string): TODO: type description here.
        created (datetime): TODO: type description here.
        user_agent (string): TODO: type description here.
        ip_address (string): TODO: type description here.
        browser (string): TODO: type description here.
        browser_version (string): TODO: type description here.
        device_brand (string): TODO: type description here.
        device_model (string): TODO: type description here.
        os (string): TODO: type description here.
        os_version (string): TODO: type description here.
        channel (ChannelEnum): TODO: type description here.
        country (string): TODO: type description here.
        city (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "created": 'created',
        "user_agent": 'user_agent',
        "ip_address": 'ip_address',
        "browser": 'browser',
        "browser_version": 'browser_version',
        "device_brand": 'device_brand',
        "device_model": 'device_model',
        "os": 'os',
        "os_version": 'os_version',
        "channel": 'channel',
        "country": 'country',
        "city": 'city'
    }

    def __init__(self,
                 uuid=None,
                 created=None,
                 user_agent=None,
                 ip_address=None,
                 browser=None,
                 browser_version=None,
                 device_brand=None,
                 device_model=None,
                 os=None,
                 os_version=None,
                 channel=None,
                 country=None,
                 city=None):
        """Constructor for the AccessLog class"""

        # Initialize members of the class
        self.uuid = uuid
        self.created = APIHelper.RFC3339DateTime(created) if created else None
        self.user_agent = user_agent
        self.ip_address = ip_address
        self.browser = browser
        self.browser_version = browser_version
        self.device_brand = device_brand
        self.device_model = device_model
        self.os = os
        self.os_version = os_version
        self.channel = channel
        self.country = country
        self.city = city

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        created = APIHelper.RFC3339DateTime.from_value(dictionary.get("created")).datetime if dictionary.get("created") else None
        user_agent = dictionary.get('user_agent')
        ip_address = dictionary.get('ip_address')
        browser = dictionary.get('browser')
        browser_version = dictionary.get('browser_version')
        device_brand = dictionary.get('device_brand')
        device_model = dictionary.get('device_model')
        os = dictionary.get('os')
        os_version = dictionary.get('os_version')
        channel = dictionary.get('channel')
        country = dictionary.get('country')
        city = dictionary.get('city')

        # Return an object of this model
        return cls(uuid,
                   created,
                   user_agent,
                   ip_address,
                   browser,
                   browser_version,
                   device_brand,
                   device_model,
                   os,
                   os_version,
                   channel,
                   country,
                   city)
