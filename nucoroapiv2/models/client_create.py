# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser

from nucoroapiv2.api_helper import APIHelper


class ClientCreate(object):

    """Implementation of the 'ClientCreate' model.

    A ModelSerializer that takes additional arguments for
    "fields", "omit" and "expand" in order to
    control which fields are displayed, and whether to replace simple
    values with complex, nested serializations

    Attributes:
        email (string): TODO: type description here.
        birthdate (date): TODO: type description here.
        title (TitleEnum): TODO: type description here.
        first_name (string): TODO: type description here.
        last_name (string): TODO: type description here.
        middle_name (string): TODO: type description here.
        gender (GenderEnum): TODO: type description here.
        marital_status (MaritalStatusEnum): TODO: type description here.
        language (string): TODO: type description here.
        employment_status (EmploymentStatusEnum): TODO: type description
            here.
        activated (datetime): TODO: type description here.
        profile (dict): TODO: type description here.
        password (string): TODO: type description here.
        referral_code (string): TODO: type description here.
        utm_source (string): TODO: type description here.
        utm_medium (string): TODO: type description here.
        utm_campaign (string): TODO: type description here.
        utm_term (string): TODO: type description here.
        utm_content (string): TODO: type description here.
        tos_consent (bool): TODO: type description here.
        data_consent (bool): TODO: type description here.
        marketing_consent (bool): TODO: type description here.
        extra_data (dict): TODO: type description here.
        phone_number (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "email": 'email',
        "birthdate": 'birthdate',
        "title": 'title',
        "first_name": 'first_name',
        "last_name": 'last_name',
        "middle_name": 'middle_name',
        "gender": 'gender',
        "marital_status": 'marital_status',
        "language": 'language',
        "employment_status": 'employment_status',
        "activated": 'activated',
        "profile": 'profile',
        "password": 'password',
        "referral_code": 'referral_code',
        "utm_source": 'utm_source',
        "utm_medium": 'utm_medium',
        "utm_campaign": 'utm_campaign',
        "utm_term": 'utm_term',
        "utm_content": 'utm_content',
        "tos_consent": 'tos_consent',
        "data_consent": 'data_consent',
        "marketing_consent": 'marketing_consent',
        "extra_data": 'extra_data',
        "phone_number": 'phone_number'
    }

    def __init__(self,
                 email=None,
                 birthdate=None,
                 title=None,
                 first_name=None,
                 last_name=None,
                 middle_name=None,
                 gender=None,
                 marital_status=None,
                 language=None,
                 employment_status=None,
                 activated=None,
                 profile=None,
                 password=None,
                 referral_code=None,
                 utm_source=None,
                 utm_medium=None,
                 utm_campaign=None,
                 utm_term=None,
                 utm_content=None,
                 tos_consent=None,
                 data_consent=None,
                 marketing_consent=None,
                 extra_data=None,
                 phone_number=None):
        """Constructor for the ClientCreate class"""

        # Initialize members of the class
        self.email = email
        self.birthdate = birthdate
        self.title = title
        self.first_name = first_name
        self.last_name = last_name
        self.middle_name = middle_name
        self.gender = gender
        self.marital_status = marital_status
        self.language = language
        self.employment_status = employment_status
        self.activated = APIHelper.RFC3339DateTime(activated) if activated else None
        self.profile = profile
        self.password = password
        self.referral_code = referral_code
        self.utm_source = utm_source
        self.utm_medium = utm_medium
        self.utm_campaign = utm_campaign
        self.utm_term = utm_term
        self.utm_content = utm_content
        self.tos_consent = tos_consent
        self.data_consent = data_consent
        self.marketing_consent = marketing_consent
        self.extra_data = extra_data
        self.phone_number = phone_number

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        email = dictionary.get('email')
        birthdate = dateutil.parser.parse(dictionary.get('birthdate')).date() if dictionary.get('birthdate') else None
        title = dictionary.get('title')
        first_name = dictionary.get('first_name')
        last_name = dictionary.get('last_name')
        middle_name = dictionary.get('middle_name')
        gender = dictionary.get('gender')
        marital_status = dictionary.get('marital_status')
        language = dictionary.get('language')
        employment_status = dictionary.get('employment_status')
        activated = APIHelper.RFC3339DateTime.from_value(dictionary.get("activated")).datetime if dictionary.get("activated") else None
        profile = dictionary.get('profile')
        password = dictionary.get('password')
        referral_code = dictionary.get('referral_code')
        utm_source = dictionary.get('utm_source')
        utm_medium = dictionary.get('utm_medium')
        utm_campaign = dictionary.get('utm_campaign')
        utm_term = dictionary.get('utm_term')
        utm_content = dictionary.get('utm_content')
        tos_consent = dictionary.get('tos_consent')
        data_consent = dictionary.get('data_consent')
        marketing_consent = dictionary.get('marketing_consent')
        extra_data = dictionary.get('extra_data')
        phone_number = dictionary.get('phone_number')

        # Return an object of this model
        return cls(email,
                   birthdate,
                   title,
                   first_name,
                   last_name,
                   middle_name,
                   gender,
                   marital_status,
                   language,
                   employment_status,
                   activated,
                   profile,
                   password,
                   referral_code,
                   utm_source,
                   utm_medium,
                   utm_campaign,
                   utm_term,
                   utm_content,
                   tos_consent,
                   data_consent,
                   marketing_consent,
                   extra_data,
                   phone_number)
