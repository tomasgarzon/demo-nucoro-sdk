# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.models.client_embed_ranking import ClientEmbedRanking


class ClientRanking(object):

    """Implementation of the 'ClientRanking' model.

    TODO: type model description here.

    Attributes:
        top_performing (list of ClientEmbedRanking): TODO: type description
            here.
        bottom_performing (list of ClientEmbedRanking): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "top_performing": 'top_performing',
        "bottom_performing": 'bottom_performing'
    }

    def __init__(self,
                 top_performing=None,
                 bottom_performing=None):
        """Constructor for the ClientRanking class"""

        # Initialize members of the class
        self.top_performing = top_performing
        self.bottom_performing = bottom_performing

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        top_performing = None
        if dictionary.get('top_performing') is not None:
            top_performing = [ClientEmbedRanking.from_dictionary(x) for x in dictionary.get('top_performing')]
        bottom_performing = None
        if dictionary.get('bottom_performing') is not None:
            bottom_performing = [ClientEmbedRanking.from_dictionary(x) for x in dictionary.get('bottom_performing')]

        # Return an object of this model
        return cls(top_performing,
                   bottom_performing)
