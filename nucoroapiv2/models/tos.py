# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser


class Tos(object):

    """Implementation of the 'Tos' model.

    TODO: type model description here.

    Attributes:
        uuid (uuid|string): TODO: type description here.
        version (string): TODO: type description here.
        content (string): TODO: type description here.
        published (date): TODO: type description here.
        previous_tos_uuid (string): TODO: type description here.
        next_tos_uuid (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "version": 'version',
        "content": 'content',
        "previous_tos_uuid": 'previous_tos_uuid',
        "next_tos_uuid": 'next_tos_uuid',
        "published": 'published'
    }

    def __init__(self,
                 uuid=None,
                 version=None,
                 content=None,
                 previous_tos_uuid=None,
                 next_tos_uuid=None,
                 published=None):
        """Constructor for the Tos class"""

        # Initialize members of the class
        self.uuid = uuid
        self.version = version
        self.content = content
        self.published = published
        self.previous_tos_uuid = previous_tos_uuid
        self.next_tos_uuid = next_tos_uuid

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        version = dictionary.get('version')
        content = dictionary.get('content')
        previous_tos_uuid = dictionary.get('previous_tos_uuid')
        next_tos_uuid = dictionary.get('next_tos_uuid')
        published = dateutil.parser.parse(dictionary.get('published')).date() if dictionary.get('published') else None

        # Return an object of this model
        return cls(uuid,
                   version,
                   content,
                   previous_tos_uuid,
                   next_tos_uuid,
                   published)
