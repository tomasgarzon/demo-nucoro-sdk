# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.api_helper import APIHelper
from nucoroapiv2.models.message import Message


class ConversationList(object):

    """Implementation of the 'ConversationList' model.

    TODO: type model description here.

    Attributes:
        uuid (uuid|string): TODO: type description here.
        created (datetime): TODO: type description here.
        subject (string): TODO: type description here.
        last_message (Message): TODO: type description here.
        unreads (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "created": 'created',
        "subject": 'subject',
        "last_message": 'last_message',
        "unreads": 'unreads'
    }

    def __init__(self,
                 uuid=None,
                 created=None,
                 subject=None,
                 last_message=None,
                 unreads=None):
        """Constructor for the ConversationList class"""

        # Initialize members of the class
        self.uuid = uuid
        self.created = APIHelper.RFC3339DateTime(created) if created else None
        self.subject = subject
        self.last_message = last_message
        self.unreads = unreads

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        created = APIHelper.RFC3339DateTime.from_value(dictionary.get("created")).datetime if dictionary.get("created") else None
        subject = dictionary.get('subject')
        last_message = Message.from_dictionary(dictionary.get('last_message')) if dictionary.get('last_message') else None
        unreads = dictionary.get('unreads')

        # Return an object of this model
        return cls(uuid,
                   created,
                   subject,
                   last_message,
                   unreads)
