# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ModelPortfolioForecastRequest(object):

    """Implementation of the 'ModelPortfolioForecastRequest' model.

    TODO: type model description here.

    Attributes:
        time_horizon (int): TODO: type description here.
        initial_amount (float): TODO: type description here.
        recurring_amount (float): TODO: type description here.
        recurring_period (int): TODO: type description here.
        model_portfolio (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "time_horizon": 'time_horizon',
        "initial_amount": 'initial_amount',
        "model_portfolio": 'model_portfolio',
        "recurring_amount": 'recurring_amount',
        "recurring_period": 'recurring_period'
    }

    def __init__(self,
                 time_horizon=None,
                 initial_amount=None,
                 model_portfolio=None,
                 recurring_amount=None,
                 recurring_period=None):
        """Constructor for the ModelPortfolioForecastRequest class"""

        # Initialize members of the class
        self.time_horizon = time_horizon
        self.initial_amount = initial_amount
        self.recurring_amount = recurring_amount
        self.recurring_period = recurring_period
        self.model_portfolio = model_portfolio

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        time_horizon = dictionary.get('time_horizon')
        initial_amount = dictionary.get('initial_amount')
        model_portfolio = dictionary.get('model_portfolio')
        recurring_amount = dictionary.get('recurring_amount')
        recurring_period = dictionary.get('recurring_period')

        # Return an object of this model
        return cls(time_horizon,
                   initial_amount,
                   model_portfolio,
                   recurring_amount,
                   recurring_period)
