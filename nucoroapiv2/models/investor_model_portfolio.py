# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from nucoroapiv2.models.asset_model_portfolio import AssetModelPortfolio


class InvestorModelPortfolio(object):

    """Implementation of the 'InvestorModelPortfolio' model.

    TODO: type model description here.

    Attributes:
        uuid (uuid|string): TODO: type description here.
        name (string): TODO: type description here.
        cash_weight (float): Percentage on the interval 0-1.
        risk_level (int): TODO: type description here.
        allocation (list of AssetModelPortfolio): TODO: type description
            here.
        extra_data (dict): Additional ModelPortfolio attributes

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uuid": 'uuid',
        "name": 'name',
        "cash_weight": 'cash_weight',
        "risk_level": 'risk_level',
        "allocation": 'allocation',
        "extra_data": 'extra_data'
    }

    def __init__(self,
                 uuid=None,
                 name=None,
                 cash_weight=None,
                 risk_level=None,
                 allocation=None,
                 extra_data=None):
        """Constructor for the InvestorModelPortfolio class"""

        # Initialize members of the class
        self.uuid = uuid
        self.name = name
        self.cash_weight = cash_weight
        self.risk_level = risk_level
        self.allocation = allocation
        self.extra_data = extra_data

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        uuid = dictionary.get('uuid')
        name = dictionary.get('name')
        cash_weight = dictionary.get('cash_weight')
        risk_level = dictionary.get('risk_level')
        allocation = None
        if dictionary.get('allocation') is not None:
            allocation = [AssetModelPortfolio.from_dictionary(x) for x in dictionary.get('allocation')]
        extra_data = dictionary.get('extra_data')

        # Return an object of this model
        return cls(uuid,
                   name,
                   cash_weight,
                   risk_level,
                   allocation,
                   extra_data)
