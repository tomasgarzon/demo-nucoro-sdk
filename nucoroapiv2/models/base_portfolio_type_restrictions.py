# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
import dateutil.parser


class BasePortfolioTypeRestrictions(object):

    """Implementation of the 'BasePortfolioTypeRestrictions' model.

    TODO: type model description here.

    Attributes:
        key (string): TODO: type description here.
        date_from (date): TODO: type description here.
        date_to (date): TODO: type description here.
        clean_value (float): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "key": 'key',
        "date_from": 'date_from',
        "date_to": 'date_to',
        "clean_value": 'clean_value'
    }

    def __init__(self,
                 key=None,
                 date_from=None,
                 date_to=None,
                 clean_value=None):
        """Constructor for the BasePortfolioTypeRestrictions class"""

        # Initialize members of the class
        self.key = key
        self.date_from = date_from
        self.date_to = date_to
        self.clean_value = clean_value

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        key = dictionary.get('key')
        date_from = dateutil.parser.parse(dictionary.get('date_from')).date() if dictionary.get('date_from') else None
        date_to = dateutil.parser.parse(dictionary.get('date_to')).date() if dictionary.get('date_to') else None
        clean_value = dictionary.get('clean_value')

        # Return an object of this model
        return cls(key,
                   date_from,
                   date_to,
                   clean_value)
