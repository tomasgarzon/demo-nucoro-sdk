# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from nucoroapiv2.api_helper import APIHelper
from nucoroapiv2.configuration import Server
from nucoroapiv2.controllers.base_controller import BaseController
from nucoroapiv2.models.paginated_client_detail_list import PaginatedClientDetailList
from nucoroapiv2.models.client_create import ClientCreate
from nucoroapiv2.models.client_detail import ClientDetail
from nucoroapiv2.models.application_client_update import ApplicationClientUpdate
from nucoroapiv2.models.paginated_address_list_list import PaginatedAddressListList
from nucoroapiv2.models.address_create import AddressCreate
from nucoroapiv2.models.address_list import AddressList
from nucoroapiv2.models.address_update import AddressUpdate
from nucoroapiv2.models.paginated_bank_account_list_list import PaginatedBankAccountListList
from nucoroapiv2.models.bank_account_create_update import BankAccountCreateUpdate
from nucoroapiv2.models.bank_account_list import BankAccountList
from nucoroapiv2.models.paginated_nationality_list_list import PaginatedNationalityListList
from nucoroapiv2.models.nationality_create import NationalityCreate
from nucoroapiv2.models.nationality_list import NationalityList
from nucoroapiv2.models.nationality_update import NationalityUpdate
from nucoroapiv2.models.client_performance import ClientPerformance
from nucoroapiv2.models.paginated_assessment_list import PaginatedAssessmentList
from nucoroapiv2.models.assessment import Assessment
from nucoroapiv2.models.paginated_tax_information_list_list import PaginatedTaxInformationListList
from nucoroapiv2.models.tax_information_create_update import TaxInformationCreateUpdate
from nucoroapiv2.models.tax_information_list import TaxInformationList
from nucoroapiv2.models.paginated_verification_list_list import PaginatedVerificationListList
from nucoroapiv2.models.verification_create import VerificationCreate
from nucoroapiv2.models.verification_list import VerificationList
from nucoroapiv2.models.paginated_verification_document_list import PaginatedVerificationDocumentList
from nucoroapiv2.models.verification_with_type import VerificationWithType
from nucoroapiv2.models.verification_document import VerificationDocument


class ApplicationController(BaseController):

    """A Controller to access Endpoints in the nucoroapiv2 API."""

    def __init__(self, config, call_back=None):
        super(ApplicationController, self).__init__(config, call_back)

    def client_list(self,
                    external_custodian_id=None,
                    extra_data=None,
                    limit=None,
                    offset=None,
                    ordering=None,
                    search=None,
                    status=None):
        """Does a GET request to /api/v2/clients/.

        List client for a Relationship manager

        Args:
            external_custodian_id (string, optional): TODO: type description
                here.
            extra_data (dict, optional): Additional client attributes for the
                specific portal
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            ordering (list of OrderingEnum, optional): Ordering
            search (string, optional): A search term.
            status (StatusB65Enum, optional): TODO: type description here.

        Returns:
            PaginatedClientDetailList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'external_custodian_id': external_custodian_id,
            'extra_data': extra_data,
            'limit': limit,
            'offset': offset,
            'ordering': ordering,
            'search': search,
            'status': status
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedClientDetailList.from_dictionary)

        return decoded

    def client_create(self,
                      email,
                      birthdate=None,
                      title=None,
                      first_name=None,
                      last_name=None,
                      middle_name=None,
                      gender=None,
                      marital_status=None,
                      language=None,
                      employment_status=None,
                      activated=None,
                      profile=None,
                      password=None,
                      referral_code=None,
                      utm_source=None,
                      utm_medium=None,
                      utm_campaign=None,
                      utm_term=None,
                      utm_content=None,
                      tos_consent=None,
                      data_consent=None,
                      marketing_consent=None,
                      extra_data=None,
                      phone_number=None):
        """Does a POST request to /api/v2/clients/.

        Create a client

        Args:
            email (string): TODO: type description here.
            birthdate (date, optional): TODO: type description here.
            title (TitleEnum, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            last_name (string, optional): TODO: type description here.
            middle_name (string, optional): TODO: type description here.
            gender (GenderEnum, optional): TODO: type description here.
            marital_status (MaritalStatusEnum, optional): TODO: type
                description here.
            language (string, optional): TODO: type description here.
            employment_status (EmploymentStatusEnum, optional): TODO: type
                description here.
            activated (datetime, optional): TODO: type description here.
            profile (dict, optional): TODO: type description here.
            password (string, optional): TODO: type description here.
            referral_code (string, optional): TODO: type description here.
            utm_source (string, optional): TODO: type description here.
            utm_medium (string, optional): TODO: type description here.
            utm_campaign (string, optional): TODO: type description here.
            utm_term (string, optional): TODO: type description here.
            utm_content (string, optional): TODO: type description here.
            tos_consent (bool, optional): TODO: type description here.
            data_consent (bool, optional): TODO: type description here.
            marketing_consent (bool, optional): TODO: type description here.
            extra_data (dict, optional): TODO: type description here.
            phone_number (string, optional): TODO: type description here.

        Returns:
            ClientCreate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'email': email,
            'birthdate': birthdate,
            'title': title,
            'first_name': first_name,
            'last_name': last_name,
            'middle_name': middle_name,
            'gender': gender,
            'marital_status': marital_status,
            'language': language,
            'employment_status': employment_status,
            'activated': APIHelper.when_defined(APIHelper.RFC3339DateTime, activated),
            'profile': profile,
            'password': password,
            'referral_code': referral_code,
            'utm_source': utm_source,
            'utm_medium': utm_medium,
            'utm_campaign': utm_campaign,
            'utm_term': utm_term,
            'utm_content': utm_content,
            'tos_consent': tos_consent,
            'data_consent': data_consent,
            'marketing_consent': marketing_consent,
            'extra_data': extra_data,
            'phone_number': phone_number
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ClientCreate.from_dictionary)

        return decoded

    def client_retrieve(self,
                        client_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/.

        Retrieve a client

        Args:
            client_uuid (uuid|string): TODO: type description here.

        Returns:
            ClientDetail: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ClientDetail.from_dictionary)

        return decoded

    def client_update(self,
                      client_uuid,
                      email,
                      tos_consent_date,
                      tax_information,
                      country_birth,
                      last_login,
                      successful_referrals,
                      kyc_verified,
                      is_verified,
                      fee_segments,
                      portfolios,
                      risk_level,
                      onboarding_token,
                      uuid,
                      created,
                      updated,
                      status,
                      language,
                      marketing_consent_date,
                      data_consent_date,
                      referred_by=None,
                      birthdate=None,
                      tos_consent=None,
                      marketing_consent=None,
                      data_consent=None,
                      extra_data=None,
                      onboarded_by=None,
                      password=None,
                      email_verified_last_request=None,
                      comments=None,
                      email_verified=None,
                      email_verify_last_request=None,
                      title=None,
                      first_name=None,
                      middle_name=None,
                      last_name=None,
                      gender=None,
                      marital_status=None,
                      phone_number=None,
                      phone_number_verified=None,
                      employment_status=None,
                      profession=None,
                      referral_code=None,
                      activated=None,
                      utm_source=None,
                      utm_medium=None,
                      utm_campaign=None,
                      utm_term=None,
                      utm_content=None):
        """Does a PUT request to /api/v2/clients/{client_uuid}/.

        Update a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            email (string): TODO: type description here.
            tos_consent_date (date): TODO: type description here.
            tax_information (list of string): TODO: type description here.
            country_birth (CountryField): TODO: type description here.
            last_login (datetime): TODO: type description here.
            successful_referrals (int): TODO: type description here.
            kyc_verified (bool): TODO: type description here.
            is_verified (bool): TODO: type description here.
            fee_segments (list of string): TODO: type description here.
            portfolios (list of string): TODO: type description here.
            risk_level (int): TODO: type description here.
            onboarding_token (string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            created (datetime): TODO: type description here.
            updated (datetime): TODO: type description here.
            status (StatusB65Enum): TODO: type description here.
            language (string): TODO: type description here.
            marketing_consent_date (date): TODO: type description here.
            data_consent_date (date): TODO: type description here.
            referred_by (string, optional): TODO: type description here.
            birthdate (date, optional): TODO: type description here.
            tos_consent (bool, optional): TODO: type description here.
            marketing_consent (bool, optional): TODO: type description here.
            data_consent (bool, optional): TODO: type description here.
            extra_data (dict, optional): TODO: type description here.
            onboarded_by (string, optional): TODO: type description here.
            password (string, optional): TODO: type description here.
            email_verified_last_request (datetime, optional): TODO: type
                description here.
            comments (string, optional): TODO: type description here.
            email_verified (bool, optional): TODO: type description here.
            email_verify_last_request (datetime, optional): TODO: type
                description here.
            title (TitleEnum, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            middle_name (string, optional): TODO: type description here.
            last_name (string, optional): TODO: type description here.
            gender (GenderEnum, optional): TODO: type description here.
            marital_status (MaritalStatusEnum, optional): TODO: type
                description here.
            phone_number (string, optional): TODO: type description here.
            phone_number_verified (datetime, optional): TODO: type description
                here.
            employment_status (EmploymentStatusEnum, optional): TODO: type
                description here.
            profession (string, optional): TODO: type description here.
            referral_code (string, optional): TODO: type description here.
            activated (datetime, optional): TODO: type description here.
            utm_source (string, optional): TODO: type description here.
            utm_medium (string, optional): TODO: type description here.
            utm_campaign (string, optional): TODO: type description here.
            utm_term (string, optional): TODO: type description here.
            utm_content (string, optional): TODO: type description here.

        Returns:
            ApplicationClientUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'email': email,
            'tos_consent_date': tos_consent_date,
            'tax_information': tax_information,
            'country_birth': country_birth,
            'last_login': APIHelper.when_defined(APIHelper.RFC3339DateTime, last_login),
            'successful_referrals': successful_referrals,
            'kyc_verified': kyc_verified,
            'is_verified': is_verified,
            'fee_segments': fee_segments,
            'portfolios': portfolios,
            'risk_level': risk_level,
            'onboarding_token': onboarding_token,
            'uuid': uuid,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'updated': APIHelper.when_defined(APIHelper.RFC3339DateTime, updated),
            'status': status,
            'language': language,
            'marketing_consent_date': marketing_consent_date,
            'data_consent_date': data_consent_date,
            'referred_by': referred_by,
            'birthdate': birthdate,
            'tos_consent': tos_consent,
            'marketing_consent': marketing_consent,
            'data_consent': data_consent,
            'extra_data': extra_data,
            'onboarded_by': onboarded_by,
            'password': password,
            'email_verified_last_request': APIHelper.when_defined(APIHelper.RFC3339DateTime, email_verified_last_request),
            'comments': comments,
            'email_verified': email_verified,
            'email_verify_last_request': APIHelper.when_defined(APIHelper.RFC3339DateTime, email_verify_last_request),
            'title': title,
            'first_name': first_name,
            'middle_name': middle_name,
            'last_name': last_name,
            'gender': gender,
            'marital_status': marital_status,
            'phone_number': phone_number,
            'phone_number_verified': APIHelper.when_defined(APIHelper.RFC3339DateTime, phone_number_verified),
            'employment_status': employment_status,
            'profession': profession,
            'referral_code': referral_code,
            'activated': APIHelper.when_defined(APIHelper.RFC3339DateTime, activated),
            'utm_source': utm_source,
            'utm_medium': utm_medium,
            'utm_campaign': utm_campaign,
            'utm_term': utm_term,
            'utm_content': utm_content
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ApplicationClientUpdate.from_dictionary)

        return decoded

    def client_partial_update(self,
                              client_uuid,
                              email=None,
                              birthdate=None,
                              tos_consent=None,
                              marketing_consent=None,
                              data_consent=None,
                              tos_consent_date=None,
                              tax_information=None,
                              country_birth=None,
                              last_login=None,
                              referred_by=None,
                              successful_referrals=None,
                              kyc_verified=None,
                              is_verified=None,
                              fee_segments=None,
                              extra_data=None,
                              portfolios=None,
                              onboarded_by=None,
                              risk_level=None,
                              onboarding_token=None,
                              password=None,
                              email_verified_last_request=None,
                              uuid=None,
                              created=None,
                              updated=None,
                              comments=None,
                              status=None,
                              email_verified=None,
                              email_verify_last_request=None,
                              title=None,
                              first_name=None,
                              middle_name=None,
                              last_name=None,
                              gender=None,
                              marital_status=None,
                              phone_number=None,
                              phone_number_verified=None,
                              language=None,
                              employment_status=None,
                              profession=None,
                              referral_code=None,
                              activated=None,
                              utm_source=None,
                              utm_medium=None,
                              utm_campaign=None,
                              utm_term=None,
                              utm_content=None,
                              marketing_consent_date=None,
                              data_consent_date=None):
        """Does a PATCH request to /api/v2/clients/{client_uuid}/.

        Partial Update a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            email (string, optional): TODO: type description here.
            birthdate (date, optional): TODO: type description here.
            tos_consent (bool, optional): TODO: type description here.
            marketing_consent (bool, optional): TODO: type description here.
            data_consent (bool, optional): TODO: type description here.
            tos_consent_date (date, optional): TODO: type description here.
            tax_information (list of string, optional): TODO: type description
                here.
            country_birth (CountryField, optional): TODO: type description
                here.
            last_login (datetime, optional): TODO: type description here.
            referred_by (string, optional): TODO: type description here.
            successful_referrals (int, optional): TODO: type description
                here.
            kyc_verified (bool, optional): TODO: type description here.
            is_verified (bool, optional): TODO: type description here.
            fee_segments (list of string, optional): TODO: type description
                here.
            extra_data (dict, optional): TODO: type description here.
            portfolios (list of string, optional): TODO: type description
                here.
            onboarded_by (string, optional): TODO: type description here.
            risk_level (int, optional): TODO: type description here.
            onboarding_token (string, optional): TODO: type description here.
            password (string, optional): TODO: type description here.
            email_verified_last_request (datetime, optional): TODO: type
                description here.
            uuid (uuid|string, optional): TODO: type description here.
            created (datetime, optional): TODO: type description here.
            updated (datetime, optional): TODO: type description here.
            comments (string, optional): TODO: type description here.
            status (StatusB65Enum, optional): TODO: type description here.
            email_verified (bool, optional): TODO: type description here.
            email_verify_last_request (datetime, optional): TODO: type
                description here.
            title (TitleEnum, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            middle_name (string, optional): TODO: type description here.
            last_name (string, optional): TODO: type description here.
            gender (GenderEnum, optional): TODO: type description here.
            marital_status (MaritalStatusEnum, optional): TODO: type
                description here.
            phone_number (string, optional): TODO: type description here.
            phone_number_verified (datetime, optional): TODO: type description
                here.
            language (string, optional): TODO: type description here.
            employment_status (EmploymentStatusEnum, optional): TODO: type
                description here.
            profession (string, optional): TODO: type description here.
            referral_code (string, optional): TODO: type description here.
            activated (datetime, optional): TODO: type description here.
            utm_source (string, optional): TODO: type description here.
            utm_medium (string, optional): TODO: type description here.
            utm_campaign (string, optional): TODO: type description here.
            utm_term (string, optional): TODO: type description here.
            utm_content (string, optional): TODO: type description here.
            marketing_consent_date (date, optional): TODO: type description
                here.
            data_consent_date (date, optional): TODO: type description here.

        Returns:
            ApplicationClientUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'email': email,
            'birthdate': birthdate,
            'tos_consent': tos_consent,
            'marketing_consent': marketing_consent,
            'data_consent': data_consent,
            'tos_consent_date': tos_consent_date,
            'tax_information': tax_information,
            'country_birth': country_birth,
            'last_login': APIHelper.when_defined(APIHelper.RFC3339DateTime, last_login),
            'referred_by': referred_by,
            'successful_referrals': successful_referrals,
            'kyc_verified': kyc_verified,
            'is_verified': is_verified,
            'fee_segments': fee_segments,
            'extra_data': extra_data,
            'portfolios': portfolios,
            'onboarded_by': onboarded_by,
            'risk_level': risk_level,
            'onboarding_token': onboarding_token,
            'password': password,
            'email_verified_last_request': APIHelper.when_defined(APIHelper.RFC3339DateTime, email_verified_last_request),
            'uuid': uuid,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'updated': APIHelper.when_defined(APIHelper.RFC3339DateTime, updated),
            'comments': comments,
            'status': status,
            'email_verified': email_verified,
            'email_verify_last_request': APIHelper.when_defined(APIHelper.RFC3339DateTime, email_verify_last_request),
            'title': title,
            'first_name': first_name,
            'middle_name': middle_name,
            'last_name': last_name,
            'gender': gender,
            'marital_status': marital_status,
            'phone_number': phone_number,
            'phone_number_verified': APIHelper.when_defined(APIHelper.RFC3339DateTime, phone_number_verified),
            'language': language,
            'employment_status': employment_status,
            'profession': profession,
            'referral_code': referral_code,
            'activated': APIHelper.when_defined(APIHelper.RFC3339DateTime, activated),
            'utm_source': utm_source,
            'utm_medium': utm_medium,
            'utm_campaign': utm_campaign,
            'utm_term': utm_term,
            'utm_content': utm_content,
            'marketing_consent_date': marketing_consent_date,
            'data_consent_date': data_consent_date
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ApplicationClientUpdate.from_dictionary)

        return decoded

    def client_addresses_list(self,
                              client_uuid,
                              limit=None,
                              offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/addresses/.

        List address for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedAddressListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/addresses/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedAddressListList.from_dictionary)

        return decoded

    def client_address_create(self,
                              client_uuid,
                              uuid,
                              line_1,
                              postcode,
                              locality,
                              country,
                              line_2=None,
                              region=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/addresses/.

        Create an address for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            line_1 (string): TODO: type description here.
            postcode (string): TODO: type description here.
            locality (string): TODO: type description here.
            country (string): TODO: type description here.
            line_2 (string, optional): TODO: type description here.
            region (string, optional): TODO: type description here.

        Returns:
            AddressCreate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/addresses/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'line1': line_1,
            'postcode': postcode,
            'locality': locality,
            'country': country,
            'line2': line_2,
            'region': region
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AddressCreate.from_dictionary)

        return decoded

    def client_address_retrieve(self,
                                address_uuid,
                                client_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/addresses/{address_uuid}/.

        Retrieve a client address

        Args:
            address_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.

        Returns:
            AddressList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/addresses/{address_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'address_uuid': {'value': address_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AddressList.from_dictionary)

        return decoded

    def client_address_update(self,
                              address_uuid,
                              client_uuid,
                              uuid,
                              line_1,
                              postcode,
                              locality,
                              country,
                              line_2=None,
                              region=None):
        """Does a PUT request to /api/v2/clients/{client_uuid}/addresses/{address_uuid}/.

        Update a client address

        Args:
            address_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            line_1 (string): TODO: type description here.
            postcode (string): TODO: type description here.
            locality (string): TODO: type description here.
            country (string): TODO: type description here.
            line_2 (string, optional): TODO: type description here.
            region (string, optional): TODO: type description here.

        Returns:
            AddressUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/addresses/{address_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'address_uuid': {'value': address_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'line1': line_1,
            'postcode': postcode,
            'locality': locality,
            'country': country,
            'line2': line_2,
            'region': region
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AddressUpdate.from_dictionary)

        return decoded

    def client_address_partial_update(self,
                                      address_uuid,
                                      client_uuid,
                                      uuid=None,
                                      line_1=None,
                                      line_2=None,
                                      postcode=None,
                                      locality=None,
                                      country=None,
                                      region=None):
        """Does a PATCH request to /api/v2/clients/{client_uuid}/addresses/{address_uuid}/.

        Partial Update a client address

        Args:
            address_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string, optional): TODO: type description here.
            line_1 (string, optional): TODO: type description here.
            line_2 (string, optional): TODO: type description here.
            postcode (string, optional): TODO: type description here.
            locality (string, optional): TODO: type description here.
            country (string, optional): TODO: type description here.
            region (string, optional): TODO: type description here.

        Returns:
            AddressUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/addresses/{address_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'address_uuid': {'value': address_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'line1': line_1,
            'line2': line_2,
            'postcode': postcode,
            'locality': locality,
            'country': country,
            'region': region
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AddressUpdate.from_dictionary)

        return decoded

    def client_address_delete(self,
                              address_uuid,
                              client_uuid):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/addresses/{address_uuid}/.

        Delete a client address

        Args:
            address_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/addresses/{address_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'address_uuid': {'value': address_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def client_bank_accounts_list(self,
                                  client_uuid,
                                  limit=None,
                                  offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/bank-accounts/.

        List Bank Account for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedBankAccountListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/bank-accounts/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedBankAccountListList.from_dictionary)

        return decoded

    def client_bank_account_create(self,
                                   client_uuid,
                                   uuid,
                                   account_number=None,
                                   account_sort_code=None,
                                   account_holder_name=None,
                                   joint=None,
                                   bank_name=None,
                                   iban=None,
                                   swift_code=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/bank-accounts/.

        Create a bank account for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            account_number (string, optional): TODO: type description here.
            account_sort_code (string, optional): TODO: type description
                here.
            account_holder_name (string, optional): TODO: type description
                here.
            joint (bool, optional): TODO: type description here.
            bank_name (string, optional): TODO: type description here.
            iban (string, optional): TODO: type description here.
            swift_code (string, optional): TODO: type description here.

        Returns:
            BankAccountCreateUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/bank-accounts/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'account_number': account_number,
            'account_sort_code': account_sort_code,
            'account_holder_name': account_holder_name,
            'joint': joint,
            'bank_name': bank_name,
            'iban': iban,
            'swift_code': swift_code
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, BankAccountCreateUpdate.from_dictionary)

        return decoded

    def client_bank_account_retrieve(self,
                                     bank_account_uuid,
                                     client_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/.

        Retrieve a client bank account

        Args:
            bank_account_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.

        Returns:
            BankAccountList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'bank_account_uuid': {'value': bank_account_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, BankAccountList.from_dictionary)

        return decoded

    def client_bank_account_update(self,
                                   bank_account_uuid,
                                   client_uuid,
                                   uuid,
                                   account_number=None,
                                   account_sort_code=None,
                                   account_holder_name=None,
                                   joint=None,
                                   bank_name=None,
                                   iban=None,
                                   swift_code=None):
        """Does a PUT request to /api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/.

        Update a client bank account

        Args:
            bank_account_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            account_number (string, optional): TODO: type description here.
            account_sort_code (string, optional): TODO: type description
                here.
            account_holder_name (string, optional): TODO: type description
                here.
            joint (bool, optional): TODO: type description here.
            bank_name (string, optional): TODO: type description here.
            iban (string, optional): TODO: type description here.
            swift_code (string, optional): TODO: type description here.

        Returns:
            BankAccountCreateUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'bank_account_uuid': {'value': bank_account_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'account_number': account_number,
            'account_sort_code': account_sort_code,
            'account_holder_name': account_holder_name,
            'joint': joint,
            'bank_name': bank_name,
            'iban': iban,
            'swift_code': swift_code
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, BankAccountCreateUpdate.from_dictionary)

        return decoded

    def client_bank_account_partial_update(self,
                                           bank_account_uuid,
                                           client_uuid,
                                           uuid=None,
                                           account_number=None,
                                           account_sort_code=None,
                                           account_holder_name=None,
                                           joint=None,
                                           bank_name=None,
                                           iban=None,
                                           swift_code=None):
        """Does a PATCH request to /api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/.

        Partial Update a client bank account

        Args:
            bank_account_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string, optional): TODO: type description here.
            account_number (string, optional): TODO: type description here.
            account_sort_code (string, optional): TODO: type description
                here.
            account_holder_name (string, optional): TODO: type description
                here.
            joint (bool, optional): TODO: type description here.
            bank_name (string, optional): TODO: type description here.
            iban (string, optional): TODO: type description here.
            swift_code (string, optional): TODO: type description here.

        Returns:
            BankAccountCreateUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'bank_account_uuid': {'value': bank_account_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'account_number': account_number,
            'account_sort_code': account_sort_code,
            'account_holder_name': account_holder_name,
            'joint': joint,
            'bank_name': bank_name,
            'iban': iban,
            'swift_code': swift_code
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, BankAccountCreateUpdate.from_dictionary)

        return decoded

    def client_bank_account_delete(self,
                                   bank_account_uuid,
                                   client_uuid):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/.

        Delete a client bank account

        Args:
            bank_account_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'bank_account_uuid': {'value': bank_account_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def client_nationlities_list(self,
                                 client_uuid,
                                 limit=None,
                                 offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/nationalities/.

        List nationlities for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedNationalityListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/nationalities/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedNationalityListList.from_dictionary)

        return decoded

    def client_nationality_create(self,
                                  client_uuid,
                                  country,
                                  document_number=None,
                                  document_type=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/nationalities/.

        Create nationality for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            country (string): TODO: type description here.
            document_number (string, optional): TODO: type description here.
            document_type (string, optional): TODO: type description here.

        Returns:
            NationalityCreate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/nationalities/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'country': country,
            'document_number': document_number,
            'document_type': document_type
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, NationalityCreate.from_dictionary)

        return decoded

    def client_nationlity_retrieve(self,
                                   client_uuid,
                                   nationality_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/.

        Retrieve a client nationality

        Args:
            client_uuid (uuid|string): TODO: type description here.
            nationality_uuid (uuid|string): TODO: type description here.

        Returns:
            NationalityList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'nationality_uuid': {'value': nationality_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, NationalityList.from_dictionary)

        return decoded

    def client_nationlity_update(self,
                                 client_uuid,
                                 nationality_uuid,
                                 country,
                                 document_number=None,
                                 document_type=None):
        """Does a PUT request to /api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/.

        Update a client nationality

        Args:
            client_uuid (uuid|string): TODO: type description here.
            nationality_uuid (uuid|string): TODO: type description here.
            country (string): TODO: type description here.
            document_number (string, optional): TODO: type description here.
            document_type (string, optional): TODO: type description here.

        Returns:
            NationalityUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'nationality_uuid': {'value': nationality_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'country': country,
            'document_number': document_number,
            'document_type': document_type
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, NationalityUpdate.from_dictionary)

        return decoded

    def client_nationlity_partial_update(self,
                                         client_uuid,
                                         nationality_uuid,
                                         country=None,
                                         document_number=None,
                                         document_type=None):
        """Does a PATCH request to /api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/.

        Partial Update a client nationality

        Args:
            client_uuid (uuid|string): TODO: type description here.
            nationality_uuid (uuid|string): TODO: type description here.
            country (string, optional): TODO: type description here.
            document_number (string, optional): TODO: type description here.
            document_type (string, optional): TODO: type description here.

        Returns:
            NationalityUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'nationality_uuid': {'value': nationality_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'country': country,
            'document_number': document_number,
            'document_type': document_type
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, NationalityUpdate.from_dictionary)

        return decoded

    def client_nationlity_delete(self,
                                 client_uuid,
                                 nationality_uuid):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/.

        Delete a client nationality

        Args:
            client_uuid (uuid|string): TODO: type description here.
            nationality_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'nationality_uuid': {'value': nationality_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def client_complete_onboarding(self,
                                   client_uuid,
                                   email,
                                   tos_consent,
                                   marketing_consent,
                                   data_consent,
                                   tos_consent_date,
                                   tax_information,
                                   country_birth,
                                   last_login,
                                   successful_referrals,
                                   kyc_verified,
                                   is_verified,
                                   fee_segments,
                                   extra_data,
                                   portfolios,
                                   risk_level,
                                   onboarding_token,
                                   uuid,
                                   created,
                                   updated,
                                   status,
                                   language,
                                   marketing_consent_date,
                                   data_consent_date,
                                   referred_by=None,
                                   birthdate=None,
                                   onboarded_by=None,
                                   comments=None,
                                   email_verified=None,
                                   email_verify_last_request=None,
                                   title=None,
                                   first_name=None,
                                   middle_name=None,
                                   last_name=None,
                                   gender=None,
                                   marital_status=None,
                                   phone_number=None,
                                   phone_number_verified=None,
                                   employment_status=None,
                                   profession=None,
                                   referral_code=None,
                                   activated=None,
                                   utm_source=None,
                                   utm_medium=None,
                                   utm_campaign=None,
                                   utm_term=None,
                                   utm_content=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/onboarding/complete/.

        Complete onboarding for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            email (string): TODO: type description here.
            tos_consent (bool): TODO: type description here.
            marketing_consent (bool): TODO: type description here.
            data_consent (bool): TODO: type description here.
            tos_consent_date (date): TODO: type description here.
            tax_information (list of string): TODO: type description here.
            country_birth (CountryField): TODO: type description here.
            last_login (datetime): TODO: type description here.
            successful_referrals (int): TODO: type description here.
            kyc_verified (bool): TODO: type description here.
            is_verified (bool): TODO: type description here.
            fee_segments (list of string): TODO: type description here.
            extra_data (dict): TODO: type description here.
            portfolios (list of string): TODO: type description here.
            risk_level (int): TODO: type description here.
            onboarding_token (string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            created (datetime): TODO: type description here.
            updated (datetime): TODO: type description here.
            status (StatusB65Enum): TODO: type description here.
            language (string): TODO: type description here.
            marketing_consent_date (date): TODO: type description here.
            data_consent_date (date): TODO: type description here.
            referred_by (string, optional): TODO: type description here.
            birthdate (date, optional): TODO: type description here.
            onboarded_by (string, optional): TODO: type description here.
            comments (string, optional): TODO: type description here.
            email_verified (bool, optional): TODO: type description here.
            email_verify_last_request (datetime, optional): TODO: type
                description here.
            title (TitleEnum, optional): TODO: type description here.
            first_name (string, optional): TODO: type description here.
            middle_name (string, optional): TODO: type description here.
            last_name (string, optional): TODO: type description here.
            gender (GenderEnum, optional): TODO: type description here.
            marital_status (MaritalStatusEnum, optional): TODO: type
                description here.
            phone_number (string, optional): TODO: type description here.
            phone_number_verified (datetime, optional): TODO: type description
                here.
            employment_status (EmploymentStatusEnum, optional): TODO: type
                description here.
            profession (string, optional): TODO: type description here.
            referral_code (string, optional): TODO: type description here.
            activated (datetime, optional): TODO: type description here.
            utm_source (string, optional): TODO: type description here.
            utm_medium (string, optional): TODO: type description here.
            utm_campaign (string, optional): TODO: type description here.
            utm_term (string, optional): TODO: type description here.
            utm_content (string, optional): TODO: type description here.

        Returns:
            ClientDetail: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/onboarding/complete/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'email': email,
            'tos_consent': tos_consent,
            'marketing_consent': marketing_consent,
            'data_consent': data_consent,
            'tos_consent_date': tos_consent_date,
            'tax_information': tax_information,
            'country_birth': country_birth,
            'last_login': APIHelper.when_defined(APIHelper.RFC3339DateTime, last_login),
            'successful_referrals': successful_referrals,
            'kyc_verified': kyc_verified,
            'is_verified': is_verified,
            'fee_segments': fee_segments,
            'extra_data': extra_data,
            'portfolios': portfolios,
            'risk_level': risk_level,
            'onboarding_token': onboarding_token,
            'uuid': uuid,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'updated': APIHelper.when_defined(APIHelper.RFC3339DateTime, updated),
            'status': status,
            'language': language,
            'marketing_consent_date': marketing_consent_date,
            'data_consent_date': data_consent_date,
            'referred_by': referred_by,
            'birthdate': birthdate,
            'onboarded_by': onboarded_by,
            'comments': comments,
            'email_verified': email_verified,
            'email_verify_last_request': APIHelper.when_defined(APIHelper.RFC3339DateTime, email_verify_last_request),
            'title': title,
            'first_name': first_name,
            'middle_name': middle_name,
            'last_name': last_name,
            'gender': gender,
            'marital_status': marital_status,
            'phone_number': phone_number,
            'phone_number_verified': APIHelper.when_defined(APIHelper.RFC3339DateTime, phone_number_verified),
            'employment_status': employment_status,
            'profession': profession,
            'referral_code': referral_code,
            'activated': APIHelper.when_defined(APIHelper.RFC3339DateTime, activated),
            'utm_source': utm_source,
            'utm_medium': utm_medium,
            'utm_campaign': utm_campaign,
            'utm_term': utm_term,
            'utm_content': utm_content
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ClientDetail.from_dictionary)

        return decoded

    def client_twrr_performance(self,
                                client_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/performance/twrr/.

        Calculate TWRR Performance for client

        Args:
            client_uuid (uuid|string): TODO: type description here.

        Returns:
            ClientPerformance: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/performance/twrr/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ClientPerformance.from_dictionary)

        return decoded

    def client_risk_assessment_list(self,
                                    client_uuid,
                                    limit=None,
                                    offset=None,
                                    status=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/risk-assessments/.

        List Risk Assessment for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            status (list of AssessmentStatusEnum, optional): TODO: type
                description here.

        Returns:
            PaginatedAssessmentList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/risk-assessments/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset,
            'status': status
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedAssessmentList.from_dictionary)

        return decoded

    def client_risk_assessment_create(self,
                                      client_uuid,
                                      uuid,
                                      choices,
                                      risk_level,
                                      created,
                                      completed=None,
                                      status=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/risk-assessments/.

        Create a risk assessment for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            choices (list of RiskChoiceQuestionCode): TODO: type description
                here.
            risk_level (int): TODO: type description here.
            created (datetime): TODO: type description here.
            completed (datetime, optional): TODO: type description here.
            status (AssessmentStatusEnum, optional): TODO: type description
                here.

        Returns:
            Assessment: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/risk-assessments/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'choices': choices,
            'risk_level': risk_level,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'completed': APIHelper.when_defined(APIHelper.RFC3339DateTime, completed),
            'status': status
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Assessment.from_dictionary)

        return decoded

    def client_risk_assessment_retrieve(self,
                                        assessment_uuid,
                                        client_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/.

        Retrieve a client risk assessment

        Args:
            assessment_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.

        Returns:
            Assessment: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'assessment_uuid': {'value': assessment_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Assessment.from_dictionary)

        return decoded

    def client_risk_assessment_partial_update(self,
                                              assessment_uuid,
                                              client_uuid,
                                              uuid=None,
                                              completed=None,
                                              choices=None,
                                              status=None,
                                              risk_level=None,
                                              created=None):
        """Does a PATCH request to /api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/.

        Partial Update a client risk assessment

        Args:
            assessment_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string, optional): TODO: type description here.
            completed (datetime, optional): TODO: type description here.
            choices (list of RiskChoiceQuestionCode, optional): TODO: type
                description here.
            status (AssessmentStatusEnum, optional): TODO: type description
                here.
            risk_level (int, optional): TODO: type description here.
            created (datetime, optional): TODO: type description here.

        Returns:
            Assessment: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'assessment_uuid': {'value': assessment_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'completed': APIHelper.when_defined(APIHelper.RFC3339DateTime, completed),
            'choices': choices,
            'status': status,
            'risk_level': risk_level,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created)
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Assessment.from_dictionary)

        return decoded

    def client_risk_assessment_delete(self,
                                      assessment_uuid,
                                      client_uuid):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/.

        Delete a client risk assessment

        Args:
            assessment_uuid (uuid|string): TODO: type description here.
            client_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'assessment_uuid': {'value': assessment_uuid, 'encode': True},
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def client_tax_information_list(self,
                                    client_uuid,
                                    limit=None,
                                    offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/tax-informations/.

        List tax information for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedTaxInformationListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/tax-informations/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedTaxInformationListList.from_dictionary)

        return decoded

    def client_tax_information_create(self,
                                      client_uuid,
                                      uuid,
                                      country,
                                      document_number,
                                      document_type=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/tax-informations/.

        Create a tax inforation for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            country (string): TODO: type description here.
            document_number (string): TODO: type description here.
            document_type (string, optional): TODO: type description here.

        Returns:
            TaxInformationCreateUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/tax-informations/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'country': country,
            'document_number': document_number,
            'document_type': document_type
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TaxInformationCreateUpdate.from_dictionary)

        return decoded

    def client_tax_information_retrieve(self,
                                        client_uuid,
                                        tax_information_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/.

        Retrieve a client tax inforation

        Args:
            client_uuid (uuid|string): TODO: type description here.
            tax_information_uuid (uuid|string): TODO: type description here.

        Returns:
            TaxInformationList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'tax_information_uuid': {'value': tax_information_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TaxInformationList.from_dictionary)

        return decoded

    def client_tax_information_update(self,
                                      client_uuid,
                                      tax_information_uuid,
                                      uuid,
                                      country,
                                      document_number,
                                      document_type=None):
        """Does a PUT request to /api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/.

        Update a client tax inforation

        Args:
            client_uuid (uuid|string): TODO: type description here.
            tax_information_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            country (string): TODO: type description here.
            document_number (string): TODO: type description here.
            document_type (string, optional): TODO: type description here.

        Returns:
            TaxInformationCreateUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'tax_information_uuid': {'value': tax_information_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'country': country,
            'document_number': document_number,
            'document_type': document_type
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TaxInformationCreateUpdate.from_dictionary)

        return decoded

    def client_tax_information_partial_update(self,
                                              client_uuid,
                                              tax_information_uuid,
                                              uuid=None,
                                              country=None,
                                              document_number=None,
                                              document_type=None):
        """Does a PATCH request to /api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/.

        Partial Update a client tax inforation

        Args:
            client_uuid (uuid|string): TODO: type description here.
            tax_information_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string, optional): TODO: type description here.
            country (string, optional): TODO: type description here.
            document_number (string, optional): TODO: type description here.
            document_type (string, optional): TODO: type description here.

        Returns:
            TaxInformationCreateUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'tax_information_uuid': {'value': tax_information_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'country': country,
            'document_number': document_number,
            'document_type': document_type
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TaxInformationCreateUpdate.from_dictionary)

        return decoded

    def client_tax_information_delete(self,
                                      client_uuid,
                                      tax_information_uuid):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/.

        Delete a client tax inforation

        Args:
            client_uuid (uuid|string): TODO: type description here.
            tax_information_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'tax_information_uuid': {'value': tax_information_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def client_verification_list(self,
                                 client_uuid,
                                 verify_type_code,
                                 limit=None,
                                 offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/.

        List Verification for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verify_type_code (string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedVerificationListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedVerificationListList.from_dictionary)

        return decoded

    def client_verification_create(self,
                                   client_uuid,
                                   verify_type_code,
                                   uuid,
                                   verify_type,
                                   created,
                                   updated,
                                   status=None,
                                   result=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/.

        Create a verification for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verify_type_code (string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            verify_type (VerifyTypeEnum): TODO: type description here.
            created (datetime): TODO: type description here.
            updated (datetime): TODO: type description here.
            status (StatusBd7Enum, optional): TODO: type description here.
            result (ResultEnum, optional): TODO: type description here.

        Returns:
            VerificationCreate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'verify_type': verify_type,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'updated': APIHelper.when_defined(APIHelper.RFC3339DateTime, updated),
            'status': status,
            'result': result
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VerificationCreate.from_dictionary)

        return decoded

    def client_verification_retrieve(self,
                                     client_uuid,
                                     verification_uuid,
                                     verify_type_code):
        """Does a GET request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{verification_uuid}/.

        Retrieve a client verification 

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verification_uuid (uuid|string): TODO: type description here.
            verify_type_code (string): TODO: type description here.

        Returns:
            VerificationList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{verification_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verification_uuid': {'value': verification_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VerificationList.from_dictionary)

        return decoded

    def client_verification_document_list(self,
                                          client_uuid,
                                          verify_type_code,
                                          limit=None,
                                          offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/.

        List Verification Document for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verify_type_code (string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedVerificationDocumentList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedVerificationDocumentList.from_dictionary)

        return decoded

    def client_verification_document_create(self,
                                            client_uuid,
                                            verify_type_code,
                                            uuid,
                                            verify_type,
                                            created,
                                            updated,
                                            verification_documents=None,
                                            status=None,
                                            result=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/.

        Create a verification Document for a client

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verify_type_code (string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            verify_type (VerifyTypeEnum): TODO: type description here.
            created (datetime): TODO: type description here.
            updated (datetime): TODO: type description here.
            verification_documents (list of VerificationDocumentCreate,
                optional): TODO: type description here.
            status (StatusBd7Enum, optional): TODO: type description here.
            result (ResultEnum, optional): TODO: type description here.

        Returns:
            VerificationWithType: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'verify_type': verify_type,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'updated': APIHelper.when_defined(APIHelper.RFC3339DateTime, updated),
            'verification_documents': verification_documents,
            'status': status,
            'result': result
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VerificationWithType.from_dictionary)

        return decoded

    def client_verification_document_retrieve(self,
                                              client_uuid,
                                              verification_document_uuid,
                                              verify_type_code):
        """Does a GET request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/.

        Retrieve a client verification document

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verification_document_uuid (uuid|string): TODO: type description
                here.
            verify_type_code (string): TODO: type description here.

        Returns:
            VerificationDocument: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verification_document_uuid': {'value': verification_document_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VerificationDocument.from_dictionary)

        return decoded

    def client_verification_document_update(self,
                                            client_uuid,
                                            verification_document_uuid,
                                            verify_type_code,
                                            uuid,
                                            document_type,
                                            document_front,
                                            document_back):
        """Does a PUT request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/.

        Update a client verification document

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verification_document_uuid (uuid|string): TODO: type description
                here.
            verify_type_code (string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            document_type (DocumentTypeEnum): TODO: type description here.
            document_front (string): TODO: type description here.
            document_back (string): TODO: type description here.

        Returns:
            VerificationDocument: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verification_document_uuid': {'value': verification_document_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'document_type': document_type,
            'document_front': document_front,
            'document_back': document_back
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VerificationDocument.from_dictionary)

        return decoded

    def client_verification_document_partial_update(self,
                                                    client_uuid,
                                                    verification_document_uuid,
                                                    verify_type_code,
                                                    uuid=None,
                                                    document_type=None,
                                                    document_front=None,
                                                    document_back=None):
        """Does a PATCH request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/.

        Partial Update a client verification document

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verification_document_uuid (uuid|string): TODO: type description
                here.
            verify_type_code (string): TODO: type description here.
            uuid (uuid|string, optional): TODO: type description here.
            document_type (DocumentTypeEnum, optional): TODO: type description
                here.
            document_front (string, optional): TODO: type description here.
            document_back (string, optional): TODO: type description here.

        Returns:
            VerificationDocument: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verification_document_uuid': {'value': verification_document_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'document_type': document_type,
            'document_front': document_front,
            'document_back': document_back
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, VerificationDocument.from_dictionary)

        return decoded

    def client_verification_document_delete(self,
                                            client_uuid,
                                            verification_document_uuid,
                                            verify_type_code):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/.

        Delete a client verificatoin document

        Args:
            client_uuid (uuid|string): TODO: type description here.
            verification_document_uuid (uuid|string): TODO: type description
                here.
            verify_type_code (string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'verification_document_uuid': {'value': verification_document_uuid, 'encode': True},
            'verify_type_code': {'value': verify_type_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)
