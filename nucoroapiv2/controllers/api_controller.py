# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from nucoroapiv2.api_helper import APIHelper
from nucoroapiv2.configuration import Server
from nucoroapiv2.controllers.base_controller import BaseController
from nucoroapiv2.models.paginated_category_list import PaginatedCategoryList
from nucoroapiv2.models.paginated_core_category_group_list import PaginatedCoreCategoryGroupList
from nucoroapiv2.models.ets_forecast_request import ETSForecastRequest
from nucoroapiv2.models.paginated_preset_category_group_list import PaginatedPresetCategoryGroupList
from nucoroapiv2.models.model_portfolio_forecast_request import ModelPortfolioForecastRequest
from nucoroapiv2.models.paginated_investor_model_portfolio_list import PaginatedInvestorModelPortfolioList
from nucoroapiv2.models.investor_model_portfolio import InvestorModelPortfolio
from nucoroapiv2.models.paginated_asset_list_list import PaginatedAssetListList
from nucoroapiv2.models.asset_detail import AssetDetail
from nucoroapiv2.models.paginated_intraday_price_list import PaginatedIntradayPriceList
from nucoroapiv2.models.intraday_price import IntradayPrice
from nucoroapiv2.models.paginated_asset_growth_list import PaginatedAssetGrowthList
from nucoroapiv2.models.paginated_price_list import PaginatedPriceList
from nucoroapiv2.models.price import Price
from nucoroapiv2.models.paginated_asset_category_list import PaginatedAssetCategoryList
from nucoroapiv2.models.paginated_invoice_list_list import PaginatedInvoiceListList
from nucoroapiv2.models.invoice_details import InvoiceDetails
from nucoroapiv2.models.paginated_order_list_list import PaginatedOrderListList
from nucoroapiv2.models.create_order import CreateOrder
from nucoroapiv2.models.order_list import OrderList
from nucoroapiv2.models.paginated_feed_activity_list_list import PaginatedFeedActivityListList
from nucoroapiv2.models.feed_activity_list import FeedActivityList
from nucoroapiv2.models.paginated_investor_fee_list import PaginatedInvestorFeeList
from nucoroapiv2.models.investor_fee import InvestorFee
from nucoroapiv2.models.invoice_list import InvoiceList
from nucoroapiv2.models.paginated_document_list import PaginatedDocumentList
from nucoroapiv2.models.document import Document
from nucoroapiv2.models.paginated_statement_list import PaginatedStatementList
from nucoroapiv2.models.statement import Statement
from nucoroapiv2.models.paginated_tax_report_list import PaginatedTaxReportList
from nucoroapiv2.models.tax_report import TaxReport
from nucoroapiv2.models.paginated_watchlist_list import PaginatedWatchlistList
from nucoroapiv2.models.watchlist import Watchlist
from nucoroapiv2.models.email_verify_view import EmailVerifyView
from nucoroapiv2.models.email_verify_request import EmailVerifyRequest
from nucoroapiv2.models.paginated_national_document_list import PaginatedNationalDocumentList
from nucoroapiv2.models.client_referral import ClientReferral
from nucoroapiv2.models.paginated_access_log_list import PaginatedAccessLogList
from nucoroapiv2.models.paginated_goal_list import PaginatedGoalList
from nucoroapiv2.models.goal import Goal
from nucoroapiv2.models.forecast_decumulation_request import ForecastDecumulationRequest
from nucoroapiv2.models.forecast_request import ForecastRequest
from nucoroapiv2.models.paginated_conversation_list_list import PaginatedConversationListList
from nucoroapiv2.models.conversation_create import ConversationCreate
from nucoroapiv2.models.paginated_message_list import PaginatedMessageList
from nucoroapiv2.models.message import Message
from nucoroapiv2.models.attachment import Attachment
from nucoroapiv2.models.minimum_app_version import MinimumAppVersion
from nucoroapiv2.models.nucoro_setting import NucoroSetting
from nucoroapiv2.models.paginated_country_list_list import PaginatedCountryListList
from nucoroapiv2.models.portal_setting_value_list import PortalSettingValueList
from nucoroapiv2.models.paginated_tos_list import PaginatedTosList
from nucoroapiv2.models.tos import Tos
from nucoroapiv2.models.paginated_portfolio_list_list import PaginatedPortfolioListList
from nucoroapiv2.models.portfolio_create import PortfolioCreate
from nucoroapiv2.models.portfolio_detail import PortfolioDetail
from nucoroapiv2.models.portfolio_update import PortfolioUpdate
from nucoroapiv2.models.paginated_allocation_list_list import PaginatedAllocationListList
from nucoroapiv2.models.allocation_list import AllocationList
from nucoroapiv2.models.allocation_detail import AllocationDetail
from nucoroapiv2.models.current_allocation import CurrentAllocation
from nucoroapiv2.models.paginated_deposit_list_list import PaginatedDepositListList
from nucoroapiv2.models.deposit_create import DepositCreate
from nucoroapiv2.models.deposit_detail import DepositDetail
from nucoroapiv2.models.paginated_portfolio_performance_list import PaginatedPortfolioPerformanceList
from nucoroapiv2.models.paginated_portfolio_performance_positions_list import PaginatedPortfolioPerformancePositionsList
from nucoroapiv2.models.paginated_rebalance_list import PaginatedRebalanceList
from nucoroapiv2.models.rebalance import Rebalance
from nucoroapiv2.models.portfolio_type_restrictions import PortfolioTypeRestrictions
from nucoroapiv2.models.paginated_investor_withdrawal_list_list import PaginatedInvestorWithdrawalListList
from nucoroapiv2.models.investor_withdrawal_create import InvestorWithdrawalCreate
from nucoroapiv2.models.withdrawal_detail import WithdrawalDetail
from nucoroapiv2.models.paginated_portfolio_type_list import PaginatedPortfolioTypeList
from nucoroapiv2.models.paginated_base_portfolio_type_restrictions_list import PaginatedBasePortfolioTypeRestrictionsList
from nucoroapiv2.models.relationship_manager import RelationshipManager
from nucoroapiv2.models.allocation_by_asset import AllocationByAsset
from nucoroapiv2.models.asset_concentration_risk import AssetConcentrationRisk
from nucoroapiv2.models.aum_evoluation import AUMEvoluation
from nucoroapiv2.models.aum_portfolio_risk import AUMPortfolioRisk
from nucoroapiv2.models.client_ranking import ClientRanking
from nucoroapiv2.models.paginated_question_list import PaginatedQuestionList
from nucoroapiv2.models.authentication_response import AuthenticationResponse
from nucoroapiv2.models.response import Response
from nucoroapiv2.models.subscribe import Subscribe
from nucoroapiv2.models.unsubscribe import Unsubscribe


class ApiController(BaseController):

    """A Controller to access Endpoints in the nucoroapiv2 API."""

    def __init__(self, config, call_back=None):
        super(ApiController, self).__init__(config, call_back)

    def api_schema_retrieve(self,
                            format=None,
                            lang=None):
        """Does a GET request to /api/schema/.

        OpenApi3 schema for this API. Format can be selected via content
        negotiation.
        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json

        Args:
            format (FormatEnum, optional): TODO: type description here.
            lang (LangEnum, optional): TODO: type description here.

        Returns:
            dict: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/schema/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format,
            'lang': lang
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def api_v_2_advice_engines_ets_categories_list(self,
                                                   limit=None,
                                                   offset=None):
        """Does a GET request to /api/v2/advice-engines/ets/categories/.

        TODO: type endpoint description here.

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedCategoryList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/advice-engines/ets/categories/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedCategoryList.from_dictionary)

        return decoded

    def api_v_2_advice_engines_ets_core_category_groups_list(self,
                                                             limit=None,
                                                             offset=None):
        """Does a GET request to /api/v2/advice-engines/ets/core-category-groups/.

        TODO: type endpoint description here.

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedCoreCategoryGroupList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/advice-engines/ets/core-category-groups/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedCoreCategoryGroupList.from_dictionary)

        return decoded

    def api_v_2_advice_engines_ets_forecast_create(self,
                                                   time_horizon,
                                                   initial_amount,
                                                   risk_level,
                                                   recurring_amount=None,
                                                   recurring_period=None,
                                                   favourite_categories=None,
                                                   excluded_categories=None):
        """Does a POST request to /api/v2/advice-engines/ets/forecast/.

        The forecast positions and amounts for the time_horizon and 
        risk_level chosen.
        Taking into account the initial_auto_deposit and the initial_amount
        jointly with the selected filters.

        Args:
            time_horizon (int): TODO: type description here.
            initial_amount (float): TODO: type description here.
            risk_level (int): TODO: type description here.
            recurring_amount (float, optional): TODO: type description here.
            recurring_period (int, optional): TODO: type description here.
            favourite_categories (list of string, optional): TODO: type
                description here.
            excluded_categories (list of string, optional): TODO: type
                description here.

        Returns:
            ETSForecastRequest: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/advice-engines/ets/forecast/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'time_horizon': time_horizon,
            'initial_amount': initial_amount,
            'risk_level': risk_level,
            'recurring_amount': recurring_amount,
            'recurring_period': recurring_period,
            'favourite_categories': favourite_categories,
            'excluded_categories': excluded_categories
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ETSForecastRequest.from_dictionary)

        return decoded

    def api_v_2_advice_engines_ets_preset_category_groups_list(self,
                                                               limit=None,
                                                               offset=None):
        """Does a GET request to /api/v2/advice-engines/ets/preset-category-groups/.

        TODO: type endpoint description here.

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedPresetCategoryGroupList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/advice-engines/ets/preset-category-groups/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedPresetCategoryGroupList.from_dictionary)

        return decoded

    def api_v_2_advice_engines_model_portfolio_forecast_create(self,
                                                               time_horizon,
                                                               initial_amount,
                                                               model_portfolio,
                                                               recurring_amount=None,
                                                               recurring_period=None):
        """Does a POST request to /api/v2/advice-engines/model-portfolio/forecast/.

        The forecast positions and amounts for the time_horizon chosen.
        Taking into account the initial_auto_deposit and the initial_amount
        jointly with the selected filters.

        Args:
            time_horizon (int): TODO: type description here.
            initial_amount (float): TODO: type description here.
            model_portfolio (string): TODO: type description here.
            recurring_amount (float, optional): TODO: type description here.
            recurring_period (int, optional): TODO: type description here.

        Returns:
            ModelPortfolioForecastRequest: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/advice-engines/model-portfolio/forecast/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'time_horizon': time_horizon,
            'initial_amount': initial_amount,
            'model_portfolio': model_portfolio,
            'recurring_amount': recurring_amount,
            'recurring_period': recurring_period
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ModelPortfolioForecastRequest.from_dictionary)

        return decoded

    def api_v_2_advice_engines_model_portfolio_model_portfolios_list(self,
                                                                     extra_data=None,
                                                                     limit=None,
                                                                     name=None,
                                                                     offset=None,
                                                                     risk_higher=None,
                                                                     risk_level=None,
                                                                     risk_lower=None):
        """Does a GET request to /api/v2/advice-engines/model-portfolio/model-portfolios/.

        TODO: type endpoint description here.

        Args:
            extra_data (dict, optional): Additional ModelPortfolio attributes
            limit (int, optional): Number of results to return per page.
            name (string, optional): TODO: type description here.
            offset (int, optional): The initial index from which to return the
                results.
            risk_higher (int, optional): TODO: type description here.
            risk_level (int, optional): TODO: type description here.
            risk_lower (int, optional): TODO: type description here.

        Returns:
            PaginatedInvestorModelPortfolioList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/advice-engines/model-portfolio/model-portfolios/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'extra_data': extra_data,
            'limit': limit,
            'name': name,
            'offset': offset,
            'risk_higher': risk_higher,
            'risk_level': risk_level,
            'risk_lower': risk_lower
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedInvestorModelPortfolioList.from_dictionary)

        return decoded

    def api_v_2_advice_engines_model_portfolio_model_portfolios_retrieve(self,
                                                                         uuid):
        """Does a GET request to /api/v2/advice-engines/model-portfolio/model-portfolios/{uuid}/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            InvestorModelPortfolio: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/advice-engines/model-portfolio/model-portfolios/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, InvestorModelPortfolio.from_dictionary)

        return decoded

    def api_v_2_assets_list(self,
                            asset_type=None,
                            category_code=None,
                            category_type=None,
                            currency=None,
                            isin=None,
                            limit=None,
                            market=None,
                            name=None,
                            offset=None,
                            status=None,
                            ticker=None):
        """Does a GET request to /api/v2/assets/.

        A list of Assets filtered by category codes.
        Default is an empty dict which returns the whole universe.

        Args:
            asset_type (AssetTypeEnum, optional): TODO: type description
                here.
            category_code (list of string, optional): TODO: type description
                here.
            category_type (list of string, optional): TODO: type description
                here.
            currency (int, optional): TODO: type description here.
            isin (string, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            market (int, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            offset (int, optional): The initial index from which to return the
                results.
            status (Status6f6Enum, optional): TODO: type description here.
            ticker (string, optional): TODO: type description here.

        Returns:
            PaginatedAssetListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/assets/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'asset_type': asset_type,
            'category_code': category_code,
            'category_type': category_type,
            'currency': currency,
            'isin': isin,
            'limit': limit,
            'market': market,
            'name': name,
            'offset': offset,
            'status': status,
            'ticker': ticker
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedAssetListList.from_dictionary)

        return decoded

    def api_v_2_assets_retrieve(self,
                                asset_identifier):
        """Does a GET request to /api/v2/assets/{asset_identifier}/.

        Allows get an asset instance by
        * UUID
        * ISIN
        * ISIN & MARKET_CODE
        * ISIN & MARKET_CODE & CURRENCY_CODE
        Examples:
            * assets/a66633d7-4418-4c85-9582-01c80df531d4/
            * assets/IE00B579F325/
            * assets/IE00B579F325_XETR_GBP/
            * assets/IE00B579F325_XETR/

        Args:
            asset_identifier (uuid|string): TODO: type description here.

        Returns:
            AssetDetail: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/assets/{asset_identifier}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'asset_identifier': {'value': asset_identifier, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AssetDetail.from_dictionary)

        return decoded

    def api_v_2_assets_intraday_prices_list(self,
                                            asset_identifier,
                                            date_after=None,
                                            date_before=None,
                                            datetime_after=None,
                                            datetime_before=None,
                                            limit=None,
                                            offset=None):
        """Does a GET request to /api/v2/assets/{asset_identifier}/intraday-prices/.

        Prices (from an Asset) list view endpoints.
        GET: Prices retrieve (rest framework builtin overriding get_object)

        Args:
            asset_identifier (uuid|string): TODO: type description here.
            date_after (date, optional): TODO: type description here.
            date_before (date, optional): TODO: type description here.
            datetime_after (datetime, optional): TODO: type description here.
            datetime_before (datetime, optional): TODO: type description
                here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedIntradayPriceList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/assets/{asset_identifier}/intraday-prices/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'asset_identifier': {'value': asset_identifier, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'date_after': date_after,
            'date_before': date_before,
            'datetime_after': APIHelper.when_defined(APIHelper.RFC3339DateTime, datetime_after),
            'datetime_before': APIHelper.when_defined(APIHelper.RFC3339DateTime, datetime_before),
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedIntradayPriceList.from_dictionary)

        return decoded

    def api_v_2_assets_intraday_prices_latest_retrieve(self,
                                                       asset_identifier):
        """Does a GET request to /api/v2/assets/{asset_identifier}/intraday-prices/latest/.

        Prices (from an Asset) list view endpoints.
        GET: Prices retrieve (rest framework builtin overriding get_object)

        Args:
            asset_identifier (uuid|string): TODO: type description here.

        Returns:
            IntradayPrice: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/assets/{asset_identifier}/intraday-prices/latest/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'asset_identifier': {'value': asset_identifier, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, IntradayPrice.from_dictionary)

        return decoded

    def api_v_2_assets_performance_list(self,
                                        asset_identifier,
                                        date_year_after=None,
                                        date_year_before=None,
                                        limit=None,
                                        offset=None):
        """Does a GET request to /api/v2/assets/{asset_identifier}/performance/.

        Retrieve asset's yearly performance.
        This View overwrites ListAPIView's 'list' method because it doesn't
        have
        any hook that allows us to call 'get_asset_price_year_graph after the
        filtering is applied.

        Args:
            asset_identifier (uuid|string): TODO: type description here.
            date_year_after (float, optional): TODO: type description here.
            date_year_before (float, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedAssetGrowthList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/assets/{asset_identifier}/performance/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'asset_identifier': {'value': asset_identifier, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'date_year_after': date_year_after,
            'date_year_before': date_year_before,
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedAssetGrowthList.from_dictionary)

        return decoded

    def api_v_2_assets_prices_list(self,
                                   asset_identifier,
                                   date_after=None,
                                   date_before=None,
                                   datetime_after=None,
                                   datetime_before=None,
                                   limit=None,
                                   offset=None):
        """Does a GET request to /api/v2/assets/{asset_identifier}/prices/.

        Prices (from an Asset) list view endpoints.
        GET: Prices retrieve (rest framework builtin overriding get_object)

        Args:
            asset_identifier (uuid|string): TODO: type description here.
            date_after (date, optional): TODO: type description here.
            date_before (date, optional): TODO: type description here.
            datetime_after (datetime, optional): TODO: type description here.
            datetime_before (datetime, optional): TODO: type description
                here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedPriceList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/assets/{asset_identifier}/prices/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'asset_identifier': {'value': asset_identifier, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'date_after': date_after,
            'date_before': date_before,
            'datetime_after': APIHelper.when_defined(APIHelper.RFC3339DateTime, datetime_after),
            'datetime_before': APIHelper.when_defined(APIHelper.RFC3339DateTime, datetime_before),
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedPriceList.from_dictionary)

        return decoded

    def api_v_2_assets_prices_latest_retrieve(self,
                                              asset_identifier):
        """Does a GET request to /api/v2/assets/{asset_identifier}/prices/latest/.

        Prices (from an Asset) list view endpoints.
        GET: Prices retrieve (rest framework builtin overriding get_object)

        Args:
            asset_identifier (uuid|string): TODO: type description here.

        Returns:
            Price: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/assets/{asset_identifier}/prices/latest/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'asset_identifier': {'value': asset_identifier, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Price.from_dictionary)

        return decoded

    def api_v_2_assets_categories_list(self,
                                       limit=None,
                                       offset=None,
                                       mtype=None):
        """Does a GET request to /api/v2/assets/categories/.

        Retrieve all asset categories

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            mtype (string, optional): TODO: type description here.

        Returns:
            PaginatedAssetCategoryList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/assets/categories/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset,
            'type': mtype
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedAssetCategoryList.from_dictionary)

        return decoded

    def api_v_2_billing_invoices_list(self,
                                      date_from=None,
                                      date_to=None,
                                      limit=None,
                                      offset=None,
                                      status=None):
        """Does a GET request to /api/v2/billing/invoices/.

        TODO: type endpoint description here.

        Args:
            date_from (date, optional): TODO: type description here.
            date_to (date, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            status (Status260Enum, optional): TODO: type description here.

        Returns:
            PaginatedInvoiceListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/billing/invoices/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'date_from': date_from,
            'date_to': date_to,
            'limit': limit,
            'offset': offset,
            'status': status
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedInvoiceListList.from_dictionary)

        return decoded

    def api_v_2_billing_invoices_retrieve(self,
                                          uuid,
                                          format=None):
        """Does a GET request to /api/v2/billing/invoices/{uuid}/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.

        Returns:
            InvoiceDetails: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/billing/invoices/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, InvoiceDetails.from_dictionary)

        return decoded

    def api_v_2_broker_orders_list(self,
                                   portfolio_uuid,
                                   advice_external_id=None,
                                   asset=None,
                                   completed_after=None,
                                   completed_before=None,
                                   extra_data=None,
                                   limit=None,
                                   offset=None,
                                   portfolio=None,
                                   status=None):
        """Does a GET request to /api/v2/broker/orders/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            advice_external_id (string, optional): TODO: type description
                here.
            asset (string, optional): TODO: type description here.
            completed_after (date, optional): TODO: type description here.
            completed_before (date, optional): TODO: type description here.
            extra_data (dict, optional): Additional order attributes for the
                specific portal
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            portfolio (string, optional): TODO: type description here.
            status (string, optional): TODO: type description here.

        Returns:
            PaginatedOrderListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/broker/orders/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'advice_external_id': advice_external_id,
            'asset': asset,
            'completed_after': completed_after,
            'completed_before': completed_before,
            'extra_data': extra_data,
            'limit': limit,
            'offset': offset,
            'portfolio': portfolio,
            'status': status
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedOrderListList.from_dictionary)

        return decoded

    def api_v_2_broker_orders_create(self,
                                     portfolio_uuid,
                                     shares,
                                     asset,
                                     order_type,
                                     method,
                                     portfolio=None,
                                     limit_price=None,
                                     stop_price=None,
                                     duration=None):
        """Does a POST request to /api/v2/broker/orders/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            shares (int): TODO: type description here.
            asset (RelatedAssetSerializerWithAssetCategories): Allow get asset
                by multiple params or UUID
            order_type (OrderTypeEnum): TODO: type description here.
            method (CreateOrderMethodEnum): TODO: type description here.
            portfolio (string, optional): TODO: type description here.
            limit_price (float, optional): TODO: type description here.
            stop_price (float, optional): TODO: type description here.
            duration (DurationEnum, optional): TODO: type description here.

        Returns:
            CreateOrder: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/broker/orders/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'shares': shares,
            'asset': asset,
            'order_type': order_type,
            'method': method,
            'portfolio': portfolio,
            'limit_price': limit_price,
            'stop_price': stop_price,
            'duration': duration
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CreateOrder.from_dictionary)

        return decoded

    def api_v_2_broker_orders_retrieve(self,
                                       portfolio_uuid,
                                       uuid):
        """Does a GET request to /api/v2/broker/orders/{uuid}/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            OrderList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/broker/orders/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, OrderList.from_dictionary)

        return decoded

    def api_v_2_broker_orders_destroy(self,
                                      portfolio_uuid,
                                      uuid):
        """Does a DELETE request to /api/v2/broker/orders/{uuid}/.

        Cancel or request cancellation to the broker

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/broker/orders/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_clients_activities_list(self,
                                        client_uuid,
                                        limit=None,
                                        offset=None,
                                        target=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/activities/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            target (list of TargetEnum, optional): TODO: type description
                here.

        Returns:
            PaginatedFeedActivityListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/activities/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset,
            'target': target
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedFeedActivityListList.from_dictionary)

        return decoded

    def api_v_2_clients_activities_retrieve(self,
                                            client_uuid,
                                            uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/activities/{uuid}/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            FeedActivityList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/activities/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, FeedActivityList.from_dictionary)

        return decoded

    def api_v_2_clients_advice_engines_list(self,
                                            client_uuid,
                                            uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/advice-engines/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/advice-engines/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_clients_advice_engines_retrieve(self,
                                                client_uuid,
                                                uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/advice-engines/{uuid}/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/advice-engines/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_clients_billing_fees_list(self,
                                          client_uuid,
                                          investor_fee_uuid,
                                          limit=None,
                                          offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/billing/fees/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            investor_fee_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedInvestorFeeList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/billing/fees/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'investor_fee_uuid': {'value': investor_fee_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedInvestorFeeList.from_dictionary)

        return decoded

    def api_v_2_clients_billing_fees_create(self,
                                            client_uuid,
                                            investor_fee_uuid,
                                            fee_type,
                                            concept,
                                            uuid,
                                            created,
                                            updated,
                                            value=None,
                                            value_unit=None,
                                            date_from=None,
                                            date_to=None,
                                            amount_from=None,
                                            amount_to=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/billing/fees/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            investor_fee_uuid (uuid|string): TODO: type description here.
            fee_type (FeeTypeEnum): Each choice should have a related method
                on fee model that contains the logic to charge the client
            concept (string): Describes the concept that will be shown on
                invoice
            uuid (uuid|string): TODO: type description here.
            created (datetime): TODO: type description here.
            updated (datetime): TODO: type description here.
            value (float, optional): Determinates a percentage or an amount
                (between 0 and 1 if percentage otherwise Positive Decimal)
            value_unit (ValueUnitEnum, optional): Determines the type of the
                value(Fixed, Percentage)
            date_from (date, optional): Defines the end date when the
                percentage should be applied
            date_to (date, optional): Defines the start date when the
                percentage should be applied
            amount_from (float, optional): Defines the amount start range when
                the percentage should be applied
            amount_to (float, optional): Defines the amount end range when the
                percentage should be applied

        Returns:
            InvestorFee: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/billing/fees/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'investor_fee_uuid': {'value': investor_fee_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'fee_type': fee_type,
            'concept': concept,
            'uuid': uuid,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'updated': APIHelper.when_defined(APIHelper.RFC3339DateTime, updated),
            'value': value,
            'value_unit': value_unit,
            'date_from': date_from,
            'date_to': date_to,
            'amount_from': amount_from,
            'amount_to': amount_to
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, InvestorFee.from_dictionary)

        return decoded

    def api_v_2_clients_billing_fees_retrieve(self,
                                              client_uuid,
                                              investor_fee_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            investor_fee_uuid (uuid|string): TODO: type description here.

        Returns:
            InvestorFee: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'investor_fee_uuid': {'value': investor_fee_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, InvestorFee.from_dictionary)

        return decoded

    def api_v_2_clients_billing_fees_update(self,
                                            client_uuid,
                                            investor_fee_uuid,
                                            fee_type,
                                            concept,
                                            uuid,
                                            created,
                                            updated,
                                            value=None,
                                            value_unit=None,
                                            date_from=None,
                                            date_to=None,
                                            amount_from=None,
                                            amount_to=None):
        """Does a PUT request to /api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            investor_fee_uuid (uuid|string): TODO: type description here.
            fee_type (FeeTypeEnum): Each choice should have a related method
                on fee model that contains the logic to charge the client
            concept (string): Describes the concept that will be shown on
                invoice
            uuid (uuid|string): TODO: type description here.
            created (datetime): TODO: type description here.
            updated (datetime): TODO: type description here.
            value (float, optional): Determinates a percentage or an amount
                (between 0 and 1 if percentage otherwise Positive Decimal)
            value_unit (ValueUnitEnum, optional): Determines the type of the
                value(Fixed, Percentage)
            date_from (date, optional): Defines the end date when the
                percentage should be applied
            date_to (date, optional): Defines the start date when the
                percentage should be applied
            amount_from (float, optional): Defines the amount start range when
                the percentage should be applied
            amount_to (float, optional): Defines the amount end range when the
                percentage should be applied

        Returns:
            InvestorFee: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'investor_fee_uuid': {'value': investor_fee_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'fee_type': fee_type,
            'concept': concept,
            'uuid': uuid,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'updated': APIHelper.when_defined(APIHelper.RFC3339DateTime, updated),
            'value': value,
            'value_unit': value_unit,
            'date_from': date_from,
            'date_to': date_to,
            'amount_from': amount_from,
            'amount_to': amount_to
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, InvestorFee.from_dictionary)

        return decoded

    def api_v_2_clients_billing_fees_partial_update(self,
                                                    client_uuid,
                                                    investor_fee_uuid,
                                                    value=None,
                                                    value_unit=None,
                                                    fee_type=None,
                                                    concept=None,
                                                    date_from=None,
                                                    date_to=None,
                                                    amount_from=None,
                                                    amount_to=None,
                                                    uuid=None,
                                                    created=None,
                                                    updated=None):
        """Does a PATCH request to /api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            investor_fee_uuid (uuid|string): TODO: type description here.
            value (float, optional): Determinates a percentage or an amount
                (between 0 and 1 if percentage otherwise Positive Decimal)
            value_unit (ValueUnitEnum, optional): Determines the type of the
                value(Fixed, Percentage)
            fee_type (FeeTypeEnum, optional): Each choice should have a
                related method on fee model that contains the logic to charge
                the client
            concept (string, optional): Describes the concept that will be
                shown on invoice
            date_from (date, optional): Defines the end date when the
                percentage should be applied
            date_to (date, optional): Defines the start date when the
                percentage should be applied
            amount_from (float, optional): Defines the amount start range when
                the percentage should be applied
            amount_to (float, optional): Defines the amount end range when the
                percentage should be applied
            uuid (uuid|string, optional): TODO: type description here.
            created (datetime, optional): TODO: type description here.
            updated (datetime, optional): TODO: type description here.

        Returns:
            InvestorFee: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'investor_fee_uuid': {'value': investor_fee_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'value': value,
            'value_unit': value_unit,
            'fee_type': fee_type,
            'concept': concept,
            'date_from': date_from,
            'date_to': date_to,
            'amount_from': amount_from,
            'amount_to': amount_to,
            'uuid': uuid,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'updated': APIHelper.when_defined(APIHelper.RFC3339DateTime, updated)
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, InvestorFee.from_dictionary)

        return decoded

    def api_v_2_clients_billing_fees_destroy(self,
                                             client_uuid,
                                             investor_fee_uuid):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            investor_fee_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'investor_fee_uuid': {'value': investor_fee_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_clients_billing_invoices_list(self,
                                              client_uuid,
                                              format=None,
                                              limit=None,
                                              offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/billing/invoices/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedInvoiceListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/billing/invoices/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format,
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedInvoiceListList.from_dictionary)

        return decoded

    def api_v_2_clients_billing_invoices_retrieve(self,
                                                  client_uuid,
                                                  uuid,
                                                  format=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/billing/invoices/{uuid}/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.

        Returns:
            InvoiceList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/billing/invoices/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, InvoiceList.from_dictionary)

        return decoded

    def api_v_2_clients_documents_list(self,
                                       client_uuid,
                                       client=None,
                                       description=None,
                                       doc_type=None,
                                       extra_data=None,
                                       limit=None,
                                       name=None,
                                       offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/documents/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            client (int, optional): TODO: type description here.
            description (string, optional): TODO: type description here.
            doc_type (list of DocTypeEnum, optional): TODO: type description
                here.
            extra_data (dict, optional): Additional document attributes for
                the specific portal
            limit (int, optional): Number of results to return per page.
            name (string, optional): TODO: type description here.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedDocumentList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/documents/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'client': client,
            'description': description,
            'doc_type': doc_type,
            'extra_data': extra_data,
            'limit': limit,
            'name': name,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedDocumentList.from_dictionary)

        return decoded

    def api_v_2_clients_documents_create(self,
                                         client_uuid,
                                         uuid,
                                         name,
                                         doc_type,
                                         path,
                                         description=None,
                                         extra_data=None):
        """Does a POST request to /api/v2/clients/{client_uuid}/documents/.

        Uploads a document for a certain user.
        This call expects the files and parameters being sent as
        form/multipart
        encoding.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            name (string): TODO: type description here.
            doc_type (DocTypeEnum): TODO: type description here.
            path (string): TODO: type description here.
            description (string, optional): TODO: type description here.
            extra_data (dict, optional): Additional document attributes for
                the specific portal

        Returns:
            Document: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/documents/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'name': name,
            'doc_type': doc_type,
            'path': path,
            'description': description,
            'extra_data': extra_data
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Document.from_dictionary)

        return decoded

    def api_v_2_clients_documents_retrieve(self,
                                           client_uuid,
                                           uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/documents/{uuid}/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            Document: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/documents/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Document.from_dictionary)

        return decoded

    def api_v_2_clients_documents_destroy(self,
                                          client_uuid,
                                          uuid):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/documents/{uuid}/.

        TODO: type endpoint description here.

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/documents/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_clients_report_statements_list(self,
                                               client_uuid,
                                               format=None,
                                               limit=None,
                                               offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/report/statements/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedStatementList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/report/statements/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format,
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedStatementList.from_dictionary)

        return decoded

    def api_v_2_clients_report_statements_retrieve(self,
                                                   client_uuid,
                                                   uuid,
                                                   format=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/report/statements/{uuid}/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.

        Returns:
            Statement: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/report/statements/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Statement.from_dictionary)

        return decoded

    def api_v_2_clients_report_tax_reports_list(self,
                                                client_uuid,
                                                format=None,
                                                limit=None,
                                                offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/report/tax-reports/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedTaxReportList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/report/tax-reports/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format,
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedTaxReportList.from_dictionary)

        return decoded

    def api_v_2_clients_report_tax_reports_retrieve(self,
                                                    client_uuid,
                                                    uuid,
                                                    format=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/report/tax-reports/{uuid}/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.

        Returns:
            TaxReport: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/report/tax-reports/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TaxReport.from_dictionary)

        return decoded

    def api_v_2_clients_watchlists_list(self,
                                        client_uuid,
                                        watchlist_uuid,
                                        limit=None,
                                        offset=None):
        """Does a GET request to /api/v2/clients/{client_uuid}/watchlists/.

        Applies filters without declaring them explicitly.
        How? Creating those filters on the fly.
        # How it works.
        - Declare 'filterable_fields' in the view.
            E.g. filterable_fields = ['status', 'name']
            __all__ is allowed. It applies filters for all model attributes.
        - COMMON_FILTERS: common filters configuration.
            - key: field name. E.g. status.
            - filter_class. filter class for the field.
            - args. Args for the filter_class __init__.  These args are taken
            from the queryset model
                E.g. 'args': {'choices': 'STATUS_CHOICES'} means
                Filter(choices=queryset.model.STATUS_CHOICES)
        # How to use it:
        class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin,
        ListCreateAPIView):
            filterable_fields = ['status', 'name']
        # Filters priority.
        1- Explicit filter declared in the filterset_class
        2- Filters declared in COMMON_FILTERS
        3- Filterset.FILTER_DEFAULTS

        Args:
            client_uuid (uuid|string): TODO: type description here.
            watchlist_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedWatchlistList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/watchlists/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'watchlist_uuid': {'value': watchlist_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedWatchlistList.from_dictionary)

        return decoded

    def api_v_2_clients_watchlists_create(self,
                                          client_uuid,
                                          watchlist_uuid,
                                          uuid,
                                          name,
                                          assets):
        """Does a POST request to /api/v2/clients/{client_uuid}/watchlists/.

        Applies filters without declaring them explicitly.
        How? Creating those filters on the fly.
        # How it works.
        - Declare 'filterable_fields' in the view.
            E.g. filterable_fields = ['status', 'name']
            __all__ is allowed. It applies filters for all model attributes.
        - COMMON_FILTERS: common filters configuration.
            - key: field name. E.g. status.
            - filter_class. filter class for the field.
            - args. Args for the filter_class __init__.  These args are taken
            from the queryset model
                E.g. 'args': {'choices': 'STATUS_CHOICES'} means
                Filter(choices=queryset.model.STATUS_CHOICES)
        # How to use it:
        class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin,
        ListCreateAPIView):
            filterable_fields = ['status', 'name']
        # Filters priority.
        1- Explicit filter declared in the filterset_class
        2- Filters declared in COMMON_FILTERS
        3- Filterset.FILTER_DEFAULTS

        Args:
            client_uuid (uuid|string): TODO: type description here.
            watchlist_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            name (string): TODO: type description here.
            assets (list of RelatedAssetSerializerWithPermission): TODO: type
                description here.

        Returns:
            Watchlist: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/watchlists/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'watchlist_uuid': {'value': watchlist_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'name': name,
            'assets': assets
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Watchlist.from_dictionary)

        return decoded

    def api_v_2_clients_watchlists_retrieve(self,
                                            client_uuid,
                                            watchlist_uuid):
        """Does a GET request to /api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/.

        Applies filters without declaring them explicitly.
        How? Creating those filters on the fly.
        # How it works.
        - Declare 'filterable_fields' in the view.
            E.g. filterable_fields = ['status', 'name']
            __all__ is allowed. It applies filters for all model attributes.
        - COMMON_FILTERS: common filters configuration.
            - key: field name. E.g. status.
            - filter_class. filter class for the field.
            - args. Args for the filter_class __init__.  These args are taken
            from the queryset model
                E.g. 'args': {'choices': 'STATUS_CHOICES'} means
                Filter(choices=queryset.model.STATUS_CHOICES)
        # How to use it:
        class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin,
        ListCreateAPIView):
            filterable_fields = ['status', 'name']
        # Filters priority.
        1- Explicit filter declared in the filterset_class
        2- Filters declared in COMMON_FILTERS
        3- Filterset.FILTER_DEFAULTS

        Args:
            client_uuid (uuid|string): TODO: type description here.
            watchlist_uuid (uuid|string): TODO: type description here.

        Returns:
            Watchlist: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'watchlist_uuid': {'value': watchlist_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Watchlist.from_dictionary)

        return decoded

    def api_v_2_clients_watchlists_update(self,
                                          client_uuid,
                                          watchlist_uuid,
                                          uuid,
                                          name,
                                          assets):
        """Does a PUT request to /api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/.

        Applies filters without declaring them explicitly.
        How? Creating those filters on the fly.
        # How it works.
        - Declare 'filterable_fields' in the view.
            E.g. filterable_fields = ['status', 'name']
            __all__ is allowed. It applies filters for all model attributes.
        - COMMON_FILTERS: common filters configuration.
            - key: field name. E.g. status.
            - filter_class. filter class for the field.
            - args. Args for the filter_class __init__.  These args are taken
            from the queryset model
                E.g. 'args': {'choices': 'STATUS_CHOICES'} means
                Filter(choices=queryset.model.STATUS_CHOICES)
        # How to use it:
        class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin,
        ListCreateAPIView):
            filterable_fields = ['status', 'name']
        # Filters priority.
        1- Explicit filter declared in the filterset_class
        2- Filters declared in COMMON_FILTERS
        3- Filterset.FILTER_DEFAULTS

        Args:
            client_uuid (uuid|string): TODO: type description here.
            watchlist_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            name (string): TODO: type description here.
            assets (list of RelatedAssetSerializerWithPermission): TODO: type
                description here.

        Returns:
            Watchlist: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'watchlist_uuid': {'value': watchlist_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'name': name,
            'assets': assets
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Watchlist.from_dictionary)

        return decoded

    def api_v_2_clients_watchlists_destroy(self,
                                           client_uuid,
                                           watchlist_uuid):
        """Does a DELETE request to /api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/.

        Applies filters without declaring them explicitly.
        How? Creating those filters on the fly.
        # How it works.
        - Declare 'filterable_fields' in the view.
            E.g. filterable_fields = ['status', 'name']
            __all__ is allowed. It applies filters for all model attributes.
        - COMMON_FILTERS: common filters configuration.
            - key: field name. E.g. status.
            - filter_class. filter class for the field.
            - args. Args for the filter_class __init__.  These args are taken
            from the queryset model
                E.g. 'args': {'choices': 'STATUS_CHOICES'} means
                Filter(choices=queryset.model.STATUS_CHOICES)
        # How to use it:
        class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin,
        ListCreateAPIView):
            filterable_fields = ['status', 'name']
        # Filters priority.
        1- Explicit filter declared in the filterset_class
        2- Filters declared in COMMON_FILTERS
        3- Filterset.FILTER_DEFAULTS

        Args:
            client_uuid (uuid|string): TODO: type description here.
            watchlist_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'watchlist_uuid': {'value': watchlist_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_clients_verify_email_update(self,
                                            uuid,
                                            token):
        """Does a PUT request to /api/v2/clients/{uuid}/verify/email/.

        Verify e-mail account with the given email token.

        Args:
            uuid (uuid|string): TODO: type description here.
            token (string): TODO: type description here.

        Returns:
            EmailVerifyView: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/{uuid}/verify/email/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'token': token
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, EmailVerifyView.from_dictionary)

        return decoded

    def api_v_2_clients_me_verify_email_create(self,
                                               email=None):
        """Does a POST request to /api/v2/clients/me/verify/email/.

        Request e-mail account verification notification.

        Args:
            email (string, optional): TODO: type description here.

        Returns:
            EmailVerifyRequest: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/me/verify/email/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'email': email
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, EmailVerifyRequest.from_dictionary)

        return decoded

    def api_v_2_clients_national_documents_list(self,
                                                limit=None,
                                                offset=None):
        """Does a GET request to /api/v2/clients/national_documents/.

        TODO: type endpoint description here.

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedNationalDocumentList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/national_documents/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedNationalDocumentList.from_dictionary)

        return decoded

    def api_v_2_clients_referral_retrieve(self,
                                          referral_code):
        """Does a GET request to /api/v2/clients/referral/{referral_code}/.

        Retrieves the currently logged in client referral code

        Args:
            referral_code (string): TODO: type description here.

        Returns:
            ClientReferral: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/clients/referral/{referral_code}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'referral_code': {'value': referral_code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ClientReferral.from_dictionary)

        return decoded

    def api_v_2_feeds_access_logs_list(self,
                                       browser=None,
                                       browser_version=None,
                                       channel=None,
                                       city=None,
                                       country=None,
                                       device_brand=None,
                                       device_model=None,
                                       ip_address=None,
                                       limit=None,
                                       offset=None,
                                       os=None,
                                       os_version=None,
                                       user_agent=None):
        """Does a GET request to /api/v2/feeds/access-logs/.

        Retrieves the latest access to the client's account

        Args:
            browser (string, optional): TODO: type description here.
            browser_version (string, optional): TODO: type description here.
            channel (ChannelEnum, optional): TODO: type description here.
            city (string, optional): TODO: type description here.
            country (int, optional): TODO: type description here.
            device_brand (string, optional): TODO: type description here.
            device_model (string, optional): TODO: type description here.
            ip_address (string, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            os (string, optional): TODO: type description here.
            os_version (string, optional): TODO: type description here.
            user_agent (string, optional): TODO: type description here.

        Returns:
            PaginatedAccessLogList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/feeds/access-logs/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'browser': browser,
            'browser_version': browser_version,
            'channel': channel,
            'city': city,
            'country': country,
            'device_brand': device_brand,
            'device_model': device_model,
            'ip_address': ip_address,
            'limit': limit,
            'offset': offset,
            'os': os,
            'os_version': os_version,
            'user_agent': user_agent
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedAccessLogList.from_dictionary)

        return decoded

    def api_v_2_feeds_activities_list(self,
                                      limit=None,
                                      offset=None,
                                      target=None):
        """Does a GET request to /api/v2/feeds/activities/.

        TODO: type endpoint description here.

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            target (list of TargetEnum, optional): TODO: type description
                here.

        Returns:
            PaginatedFeedActivityListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/feeds/activities/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset,
            'target': target
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedFeedActivityListList.from_dictionary)

        return decoded

    def api_v_2_goals_list(self,
                           goal_uuid,
                           limit=None,
                           offset=None):
        """Does a GET request to /api/v2/goals/.

        TODO: type endpoint description here.

        Args:
            goal_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedGoalList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/goals/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'goal_uuid': {'value': goal_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedGoalList.from_dictionary)

        return decoded

    def api_v_2_goals_create(self,
                             goal_uuid,
                             uuid,
                             name,
                             goal_amount,
                             deadline,
                             initial_amount,
                             risk_level,
                             created,
                             portfolio=None,
                             recurring_amount=None):
        """Does a POST request to /api/v2/goals/.

        TODO: type endpoint description here.

        Args:
            goal_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            name (string): TODO: type description here.
            goal_amount (float): Desired amount needed to fulfill the goal
            deadline (date): Due date to reach the goal.
            initial_amount (float): Initial deposit amount to start from. No
                sense to start by 0
            risk_level (int): TODO: type description here.
            created (datetime): TODO: type description here.
            portfolio (string, optional): TODO: type description here.
            recurring_amount (float, optional): TODO: type description here.

        Returns:
            Goal: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/goals/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'goal_uuid': {'value': goal_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'name': name,
            'goal_amount': goal_amount,
            'deadline': deadline,
            'initial_amount': initial_amount,
            'risk_level': risk_level,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'portfolio': portfolio,
            'recurring_amount': recurring_amount
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Goal.from_dictionary)

        return decoded

    def api_v_2_goals_retrieve(self,
                               goal_uuid):
        """Does a GET request to /api/v2/goals/{goal_uuid}/.

        TODO: type endpoint description here.

        Args:
            goal_uuid (uuid|string): TODO: type description here.

        Returns:
            Goal: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/goals/{goal_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'goal_uuid': {'value': goal_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Goal.from_dictionary)

        return decoded

    def api_v_2_goals_partial_update(self,
                                     goal_uuid,
                                     uuid=None,
                                     name=None,
                                     portfolio=None,
                                     goal_amount=None,
                                     deadline=None,
                                     initial_amount=None,
                                     recurring_amount=None,
                                     risk_level=None,
                                     created=None):
        """Does a PATCH request to /api/v2/goals/{goal_uuid}/.

        TODO: type endpoint description here.

        Args:
            goal_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            portfolio (string, optional): TODO: type description here.
            goal_amount (float, optional): Desired amount needed to fulfill
                the goal
            deadline (date, optional): Due date to reach the goal.
            initial_amount (float, optional): Initial deposit amount to start
                from. No sense to start by 0
            recurring_amount (float, optional): TODO: type description here.
            risk_level (int, optional): TODO: type description here.
            created (datetime, optional): TODO: type description here.

        Returns:
            Goal: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/goals/{goal_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'goal_uuid': {'value': goal_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'name': name,
            'portfolio': portfolio,
            'goal_amount': goal_amount,
            'deadline': deadline,
            'initial_amount': initial_amount,
            'recurring_amount': recurring_amount,
            'risk_level': risk_level,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created)
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Goal.from_dictionary)

        return decoded

    def api_v_2_goals_destroy(self,
                              goal_uuid):
        """Does a DELETE request to /api/v2/goals/{goal_uuid}/.

        TODO: type endpoint description here.

        Args:
            goal_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/goals/{goal_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'goal_uuid': {'value': goal_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_goals_decumulation_create(self,
                                          initial_amount,
                                          recurring_amount,
                                          risk_level,
                                          withdrawal_amount,
                                          retirement_age,
                                          life_expectancy=None):
        """Does a POST request to /api/v2/goals/decumulation/.

        Return a Goal Forecast Decumulation

        Args:
            initial_amount (float): TODO: type description here.
            recurring_amount (float): TODO: type description here.
            risk_level (int): TODO: type description here.
            withdrawal_amount (float): TODO: type description here.
            retirement_age (int): TODO: type description here.
            life_expectancy (int, optional): TODO: type description here.

        Returns:
            ForecastDecumulationRequest: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/goals/decumulation/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'initial_amount': initial_amount,
            'recurring_amount': recurring_amount,
            'risk_level': risk_level,
            'withdrawal_amount': withdrawal_amount,
            'retirement_age': retirement_age,
            'life_expectancy': life_expectancy
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ForecastDecumulationRequest.from_dictionary)

        return decoded

    def api_v_2_goals_forecast_create(self,
                                      goal_amount,
                                      deadline,
                                      initial_amount,
                                      recurring_amount,
                                      risk_level):
        """Does a POST request to /api/v2/goals/forecast/.

        Return a Goal Forecast

        Args:
            goal_amount (float): TODO: type description here.
            deadline (date): TODO: type description here.
            initial_amount (float): TODO: type description here.
            recurring_amount (float): TODO: type description here.
            risk_level (int): TODO: type description here.

        Returns:
            ForecastRequest: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/goals/forecast/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'goal_amount': goal_amount,
            'deadline': deadline,
            'initial_amount': initial_amount,
            'recurring_amount': recurring_amount,
            'risk_level': risk_level
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ForecastRequest.from_dictionary)

        return decoded

    def api_v_2_inbox_conversations_list(self,
                                         limit=None,
                                         offset=None):
        """Does a GET request to /api/v2/inbox/conversations/.

        get:
        List all conversations with last_message of a user
        post:
        Create new conversation with N messages (without attachments)

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedConversationListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/inbox/conversations/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedConversationListList.from_dictionary)

        return decoded

    def api_v_2_inbox_conversations_create(self,
                                           uuid,
                                           portal,
                                           created,
                                           subject,
                                           messages=None):
        """Does a POST request to /api/v2/inbox/conversations/.

        get:
        List all conversations with last_message of a user
        post:
        Create new conversation with N messages (without attachments)

        Args:
            uuid (uuid|string): TODO: type description here.
            portal (int): TODO: type description here.
            created (datetime): TODO: type description here.
            subject (string): TODO: type description here.
            messages (Message, optional): TODO: type description here.

        Returns:
            ConversationCreate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/inbox/conversations/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'portal': portal,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'subject': subject,
            'messages': messages
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ConversationCreate.from_dictionary)

        return decoded

    def api_v_2_inbox_conversations_list_2(self,
                                           conversation,
                                           limit=None,
                                           offset=None):
        """Does a GET request to /api/v2/inbox/conversations/{conversation}/.

        List all messages from a conversation uuid

        Args:
            conversation (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedMessageList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/inbox/conversations/{conversation}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'conversation': {'value': conversation, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedMessageList.from_dictionary)

        return decoded

    def api_v_2_inbox_conversations_messages_create(self,
                                                    conversation,
                                                    user,
                                                    read_date,
                                                    created,
                                                    attachments,
                                                    uuid,
                                                    content=None):
        """Does a POST request to /api/v2/inbox/conversations/{conversation}/messages/.

        View for creating message on a specific conversation

        Args:
            conversation (uuid|string): TODO: type description here.
            user (string): TODO: type description here.
            read_date (datetime): TODO: type description here.
            created (datetime): TODO: type description here.
            attachments (list of Attachment): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            content (string, optional): TODO: type description here.

        Returns:
            Message: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/inbox/conversations/{conversation}/messages/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'conversation': {'value': conversation, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'user': user,
            'read_date': APIHelper.when_defined(APIHelper.RFC3339DateTime, read_date),
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'attachments': attachments,
            'uuid': uuid,
            'content': content
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Message.from_dictionary)

        return decoded

    def api_v_2_inbox_conversations_messages_attachments_retrieve(self,
                                                                  conversation,
                                                                  message,
                                                                  uuid,
                                                                  format=None):
        """Does a GET request to /api/v2/inbox/conversations/{conversation}/messages/{message}/attachments/{uuid}/.

        View to access to an attachment

        Args:
            conversation (uuid|string): TODO: type description here.
            message (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.

        Returns:
            Attachment: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/inbox/conversations/{conversation}/messages/{message}/attachments/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'conversation': {'value': conversation, 'encode': True},
            'message': {'value': message, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Attachment.from_dictionary)

        return decoded

    def api_v_2_mobile_version_retrieve(self,
                                        platform):
        """Does a GET request to /api/v2/mobile/{platform}/version/.

        Returns the number of the last required APP Version for a platform.

        Args:
            platform (string): TODO: type description here.

        Returns:
            MinimumAppVersion: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/mobile/{platform}/version/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'platform': {'value': platform, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, MinimumAppVersion.from_dictionary)

        return decoded

    def api_v_2_platform_settings_list(self):
        """Does a GET request to /api/v2/platform/settings/.

        TODO: type endpoint description here.

        Returns:
            list of NucoroSetting: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/platform/settings/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, NucoroSetting.from_dictionary)

        return decoded

    def api_v_2_portal_countries_list(self,
                                      limit=None,
                                      offset=None):
        """Does a GET request to /api/v2/portal/countries/.

        Retrieves the list of countries

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedCountryListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portal/countries/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedCountryListList.from_dictionary)

        return decoded

    def api_v_2_portal_settings_retrieve(self):
        """Does a GET request to /api/v2/portal/settings/.

        TODO: type endpoint description here.

        Returns:
            PortalSettingValueList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portal/settings/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PortalSettingValueList.from_dictionary)

        return decoded

    def api_v_2_portal_tos_list(self,
                                limit=None,
                                offset=None):
        """Does a GET request to /api/v2/portal/tos/.

        List all ToS for the current Portal

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedTosList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portal/tos/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedTosList.from_dictionary)

        return decoded

    def api_v_2_portal_tos_retrieve(self,
                                    uuid):
        """Does a GET request to /api/v2/portal/tos/{uuid}/.

        Retrieves a specific ToS

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            Tos: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portal/tos/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Tos.from_dictionary)

        return decoded

    def api_v_2_portal_tos_current_retrieve(self):
        """Does a GET request to /api/v2/portal/tos/current/.

        Retrieves the current ToS for the Portal

        Returns:
            Tos: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portal/tos/current/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Tos.from_dictionary)

        return decoded

    def api_v_2_portfolios_list(self,
                                portfolio_uuid,
                                external_custodian_id=None,
                                limit=None,
                                offset=None,
                                status=None,
                                valuation_date_after=None,
                                valuation_date_before=None):
        """Does a GET request to /api/v2/portfolios/.

        Allow aggregate/group fields of the ModelView model or its related
        entities.
           Query params should use dot notation.
        Requires:
            ListModelMixin (ListAPIView, ListCreateApiView)
        Args:
            * aggregatable_fields (dict): optional.
                Keys: fields that allow aggregation (including related
                entities with "__" notation).
                Values: django qs functions or aggregate_fns
                Example:
                    aggregatable_fields = {
                        'allocations__balance': [Sum, Avg],
                    }
            * groupable_fields (list): optional. fields that allow grouping
            (including related entities with "__" notation).
                Example:
                    groupable_fields = ['portfolio__portfolio_type']
        Query Param Examples:
            >>> ?group_by=portfolio.portfolio_type
            >>> ?aggregate[Sum]=portfolio.allocations.balance
            >>>
            ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balan
            ce

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            external_custodian_id (string, optional): TODO: type description
                here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            status (list of Status2efEnum, optional): TODO: type description
                here.
            valuation_date_after (date, optional): TODO: type description
                here.
            valuation_date_before (date, optional): TODO: type description
                here.

        Returns:
            PaginatedPortfolioListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'external_custodian_id': external_custodian_id,
            'limit': limit,
            'offset': offset,
            'status': status,
            'valuation_date_after': valuation_date_after,
            'valuation_date_before': valuation_date_before
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedPortfolioListList.from_dictionary)

        return decoded

    def api_v_2_portfolios_create(self,
                                  portfolio_uuid,
                                  uuid,
                                  name,
                                  portfolio_type,
                                  risk_level,
                                  time_horizon,
                                  status,
                                  created,
                                  activated,
                                  advisor,
                                  advice_engine,
                                  currency=None,
                                  extra_data=None,
                                  client=None):
        """Does a POST request to /api/v2/portfolios/.

        Allow aggregate/group fields of the ModelView model or its related
        entities.
           Query params should use dot notation.
        Requires:
            ListModelMixin (ListAPIView, ListCreateApiView)
        Args:
            * aggregatable_fields (dict): optional.
                Keys: fields that allow aggregation (including related
                entities with "__" notation).
                Values: django qs functions or aggregate_fns
                Example:
                    aggregatable_fields = {
                        'allocations__balance': [Sum, Avg],
                    }
            * groupable_fields (list): optional. fields that allow grouping
            (including related entities with "__" notation).
                Example:
                    groupable_fields = ['portfolio__portfolio_type']
        Query Param Examples:
            >>> ?group_by=portfolio.portfolio_type
            >>> ?aggregate[Sum]=portfolio.allocations.balance
            >>>
            ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balan
            ce

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            name (string): TODO: type description here.
            portfolio_type (string): TODO: type description here.
            risk_level (int): TODO: type description here.
            time_horizon (int): TODO: type description here.
            status (Status2efEnum): TODO: type description here.
            created (datetime): TODO: type description here.
            activated (datetime): TODO: type description here.
            advisor (string): TODO: type description here.
            advice_engine (string): TODO: type description here.
            currency (string, optional): TODO: type description here.
            extra_data (dict, optional): TODO: type description here.
            client (string, optional): TODO: type description here.

        Returns:
            PortfolioCreate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'name': name,
            'portfolio_type': portfolio_type,
            'risk_level': risk_level,
            'time_horizon': time_horizon,
            'status': status,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'activated': APIHelper.when_defined(APIHelper.RFC3339DateTime, activated),
            'advisor': advisor,
            'advice_engine': advice_engine,
            'currency': currency,
            'extra_data': extra_data,
            'client': client
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PortfolioCreate.from_dictionary)

        return decoded

    def api_v_2_portfolios_retrieve(self,
                                    portfolio_uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/.

        Allow aggregate/group fields of the ModelView model or its related
        entities.
           Query params should use dot notation.
        Requires:
            ListModelMixin (ListAPIView, ListCreateApiView)
        Args:
            * aggregatable_fields (dict): optional.
                Keys: fields that allow aggregation (including related
                entities with "__" notation).
                Values: django qs functions or aggregate_fns
                Example:
                    aggregatable_fields = {
                        'allocations__balance': [Sum, Avg],
                    }
            * groupable_fields (list): optional. fields that allow grouping
            (including related entities with "__" notation).
                Example:
                    groupable_fields = ['portfolio__portfolio_type']
        Query Param Examples:
            >>> ?group_by=portfolio.portfolio_type
            >>> ?aggregate[Sum]=portfolio.allocations.balance
            >>>
            ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balan
            ce

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.

        Returns:
            PortfolioDetail: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PortfolioDetail.from_dictionary)

        return decoded

    def api_v_2_portfolios_update(self,
                                  portfolio_uuid,
                                  uuid,
                                  name,
                                  portfolio_type,
                                  status,
                                  created,
                                  activated,
                                  advisor,
                                  advice_engine,
                                  risk_level=None,
                                  time_horizon=None,
                                  currency=None,
                                  extra_data=None,
                                  client=None):
        """Does a PUT request to /api/v2/portfolios/{portfolio_uuid}/.

        Allow aggregate/group fields of the ModelView model or its related
        entities.
           Query params should use dot notation.
        Requires:
            ListModelMixin (ListAPIView, ListCreateApiView)
        Args:
            * aggregatable_fields (dict): optional.
                Keys: fields that allow aggregation (including related
                entities with "__" notation).
                Values: django qs functions or aggregate_fns
                Example:
                    aggregatable_fields = {
                        'allocations__balance': [Sum, Avg],
                    }
            * groupable_fields (list): optional. fields that allow grouping
            (including related entities with "__" notation).
                Example:
                    groupable_fields = ['portfolio__portfolio_type']
        Query Param Examples:
            >>> ?group_by=portfolio.portfolio_type
            >>> ?aggregate[Sum]=portfolio.allocations.balance
            >>>
            ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balan
            ce

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            name (string): TODO: type description here.
            portfolio_type (string): TODO: type description here.
            status (Status2efEnum): TODO: type description here.
            created (datetime): TODO: type description here.
            activated (datetime): TODO: type description here.
            advisor (string): TODO: type description here.
            advice_engine (string): TODO: type description here.
            risk_level (int, optional): TODO: type description here.
            time_horizon (int, optional): TODO: type description here.
            currency (string, optional): TODO: type description here.
            extra_data (dict, optional): TODO: type description here.
            client (string, optional): TODO: type description here.

        Returns:
            PortfolioUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'name': name,
            'portfolio_type': portfolio_type,
            'status': status,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'activated': APIHelper.when_defined(APIHelper.RFC3339DateTime, activated),
            'advisor': advisor,
            'advice_engine': advice_engine,
            'risk_level': risk_level,
            'time_horizon': time_horizon,
            'currency': currency,
            'extra_data': extra_data,
            'client': client
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PortfolioUpdate.from_dictionary)

        return decoded

    def api_v_2_portfolios_partial_update(self,
                                          portfolio_uuid,
                                          uuid=None,
                                          name=None,
                                          portfolio_type=None,
                                          risk_level=None,
                                          time_horizon=None,
                                          status=None,
                                          currency=None,
                                          created=None,
                                          activated=None,
                                          advisor=None,
                                          advice_engine=None,
                                          extra_data=None,
                                          client=None):
        """Does a PATCH request to /api/v2/portfolios/{portfolio_uuid}/.

        Allow aggregate/group fields of the ModelView model or its related
        entities.
           Query params should use dot notation.
        Requires:
            ListModelMixin (ListAPIView, ListCreateApiView)
        Args:
            * aggregatable_fields (dict): optional.
                Keys: fields that allow aggregation (including related
                entities with "__" notation).
                Values: django qs functions or aggregate_fns
                Example:
                    aggregatable_fields = {
                        'allocations__balance': [Sum, Avg],
                    }
            * groupable_fields (list): optional. fields that allow grouping
            (including related entities with "__" notation).
                Example:
                    groupable_fields = ['portfolio__portfolio_type']
        Query Param Examples:
            >>> ?group_by=portfolio.portfolio_type
            >>> ?aggregate[Sum]=portfolio.allocations.balance
            >>>
            ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balan
            ce

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string, optional): TODO: type description here.
            name (string, optional): TODO: type description here.
            portfolio_type (string, optional): TODO: type description here.
            risk_level (int, optional): TODO: type description here.
            time_horizon (int, optional): TODO: type description here.
            status (Status2efEnum, optional): TODO: type description here.
            currency (string, optional): TODO: type description here.
            created (datetime, optional): TODO: type description here.
            activated (datetime, optional): TODO: type description here.
            advisor (string, optional): TODO: type description here.
            advice_engine (string, optional): TODO: type description here.
            extra_data (dict, optional): TODO: type description here.
            client (string, optional): TODO: type description here.

        Returns:
            PortfolioUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'name': name,
            'portfolio_type': portfolio_type,
            'risk_level': risk_level,
            'time_horizon': time_horizon,
            'status': status,
            'currency': currency,
            'created': APIHelper.when_defined(APIHelper.RFC3339DateTime, created),
            'activated': APIHelper.when_defined(APIHelper.RFC3339DateTime, activated),
            'advisor': advisor,
            'advice_engine': advice_engine,
            'extra_data': extra_data,
            'client': client
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PortfolioUpdate.from_dictionary)

        return decoded

    def api_v_2_portfolios_destroy(self,
                                   portfolio_uuid):
        """Does a DELETE request to /api/v2/portfolios/{portfolio_uuid}/.

        Allow aggregate/group fields of the ModelView model or its related
        entities.
           Query params should use dot notation.
        Requires:
            ListModelMixin (ListAPIView, ListCreateApiView)
        Args:
            * aggregatable_fields (dict): optional.
                Keys: fields that allow aggregation (including related
                entities with "__" notation).
                Values: django qs functions or aggregate_fns
                Example:
                    aggregatable_fields = {
                        'allocations__balance': [Sum, Avg],
                    }
            * groupable_fields (list): optional. fields that allow grouping
            (including related entities with "__" notation).
                Example:
                    groupable_fields = ['portfolio__portfolio_type']
        Query Param Examples:
            >>> ?group_by=portfolio.portfolio_type
            >>> ?aggregate[Sum]=portfolio.allocations.balance
            >>>
            ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balan
            ce

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_portfolios_activities_list(self,
                                           portfolio_uuid,
                                           limit=None,
                                           offset=None,
                                           target=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/activities/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            target (list of TargetEnum, optional): TODO: type description
                here.

        Returns:
            PaginatedFeedActivityListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/activities/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset,
            'target': target
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedFeedActivityListList.from_dictionary)

        return decoded

    def api_v_2_portfolios_activities_retrieve(self,
                                               portfolio_uuid,
                                               uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/activities/{uuid}/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            FeedActivityList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/activities/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, FeedActivityList.from_dictionary)

        return decoded

    def api_v_2_portfolios_allocations_list(self,
                                            portfolio_uuid,
                                            limit=None,
                                            offset=None,
                                            valuation_date_after=None,
                                            valuation_date_before=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/allocations/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            valuation_date_after (date, optional): TODO: type description
                here.
            valuation_date_before (date, optional): TODO: type description
                here.

        Returns:
            PaginatedAllocationListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/allocations/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset,
            'valuation_date_after': valuation_date_after,
            'valuation_date_before': valuation_date_before
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedAllocationListList.from_dictionary)

        return decoded

    def api_v_2_portfolios_allocations_retrieve(self,
                                                id,
                                                portfolio_uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/allocations/{id}/.

        TODO: type endpoint description here.

        Args:
            id (int): A unique integer value identifying this allocation.
            portfolio_uuid (uuid|string): TODO: type description here.

        Returns:
            AllocationList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/allocations/{id}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True},
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AllocationList.from_dictionary)

        return decoded

    def api_v_2_portfolios_allocations_end_day(self,
                                               portfolio_uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/allocations/end-day/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.

        Returns:
            AllocationList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AllocationList.from_dictionary)

        return decoded

    def api_v_2_portfolios_allocations_end_day_by_date_retrieve(self,
                                                                allocation_date,
                                                                portfolio_uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/allocations/end-day/{allocation_date}/.

        TODO: type endpoint description here.

        Args:
            allocation_date (string): TODO: type description here.
            portfolio_uuid (uuid|string): TODO: type description here.

        Returns:
            AllocationDetail: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/{allocation_date}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'allocation_date': {'value': allocation_date, 'encode': True},
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AllocationDetail.from_dictionary)

        return decoded

    def api_v_2_portfolios_allocations_end_day_latest_retrieve(self,
                                                               portfolio_uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/allocations/end-day/latest/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.

        Returns:
            AllocationDetail: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/latest/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AllocationDetail.from_dictionary)

        return decoded

    def api_v_2_portfolios_allocations_intraday_latest_retrieve(self,
                                                                portfolio_uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/allocations/intraday/latest/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.

        Returns:
            CurrentAllocation: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/allocations/intraday/latest/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CurrentAllocation.from_dictionary)

        return decoded

    def api_v_2_portfolios_deposits_list(self,
                                         portfolio_uuid,
                                         limit=None,
                                         offset=None,
                                         status=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/deposits/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            status (list of StatusB6aEnum, optional): TODO: type description
                here.

        Returns:
            PaginatedDepositListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/deposits/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset,
            'status': status
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedDepositListList.from_dictionary)

        return decoded

    def api_v_2_portfolios_deposits_create(self,
                                           portfolio_uuid,
                                           uuid,
                                           amount,
                                           provider,
                                           reference,
                                           status,
                                           reason,
                                           completed,
                                           transacted_at,
                                           deposit_type=None,
                                           extra_data=None):
        """Does a POST request to /api/v2/portfolios/{portfolio_uuid}/deposits/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            amount (float): TODO: type description here.
            provider (string): TODO: type description here.
            reference (string): TODO: type description here.
            status (StatusB6aEnum): TODO: type description here.
            reason (string): Cancelled reason
            completed (datetime): TODO: type description here.
            transacted_at (datetime): TODO: type description here.
            deposit_type (DepositTypeEnum, optional): TODO: type description
                here.
            extra_data (dict, optional): Additional deposit attributes for the
                specific portal

        Returns:
            DepositCreate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/deposits/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'amount': amount,
            'provider': provider,
            'reference': reference,
            'status': status,
            'reason': reason,
            'completed': APIHelper.when_defined(APIHelper.RFC3339DateTime, completed),
            'transacted_at': APIHelper.when_defined(APIHelper.RFC3339DateTime, transacted_at),
            'deposit_type': deposit_type,
            'extra_data': extra_data
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, DepositCreate.from_dictionary)

        return decoded

    def api_v_2_portfolios_deposits_retrieve(self,
                                             portfolio_uuid,
                                             uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            DepositDetail: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, DepositDetail.from_dictionary)

        return decoded

    def api_v_2_portfolios_deposits_destroy(self,
                                            portfolio_uuid,
                                            uuid):
        """Does a DELETE request to /api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_portfolios_orders_list(self,
                                       portfolio_uuid,
                                       advice_external_id=None,
                                       asset=None,
                                       completed_after=None,
                                       completed_before=None,
                                       extra_data=None,
                                       limit=None,
                                       offset=None,
                                       portfolio=None,
                                       status=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/orders/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            advice_external_id (string, optional): TODO: type description
                here.
            asset (string, optional): TODO: type description here.
            completed_after (date, optional): TODO: type description here.
            completed_before (date, optional): TODO: type description here.
            extra_data (dict, optional): Additional order attributes for the
                specific portal
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            portfolio (string, optional): TODO: type description here.
            status (string, optional): TODO: type description here.

        Returns:
            PaginatedOrderListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/orders/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'advice_external_id': advice_external_id,
            'asset': asset,
            'completed_after': completed_after,
            'completed_before': completed_before,
            'extra_data': extra_data,
            'limit': limit,
            'offset': offset,
            'portfolio': portfolio,
            'status': status
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedOrderListList.from_dictionary)

        return decoded

    def api_v_2_portfolios_orders_create(self,
                                         portfolio_uuid,
                                         shares,
                                         asset,
                                         order_type,
                                         method,
                                         portfolio=None,
                                         limit_price=None,
                                         stop_price=None,
                                         duration=None):
        """Does a POST request to /api/v2/portfolios/{portfolio_uuid}/orders/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            shares (int): TODO: type description here.
            asset (RelatedAssetSerializerWithAssetCategories): Allow get asset
                by multiple params or UUID
            order_type (OrderTypeEnum): TODO: type description here.
            method (CreateOrderMethodEnum): TODO: type description here.
            portfolio (string, optional): TODO: type description here.
            limit_price (float, optional): TODO: type description here.
            stop_price (float, optional): TODO: type description here.
            duration (DurationEnum, optional): TODO: type description here.

        Returns:
            CreateOrder: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/orders/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'shares': shares,
            'asset': asset,
            'order_type': order_type,
            'method': method,
            'portfolio': portfolio,
            'limit_price': limit_price,
            'stop_price': stop_price,
            'duration': duration
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, CreateOrder.from_dictionary)

        return decoded

    def api_v_2_portfolios_orders_retrieve(self,
                                           portfolio_uuid,
                                           uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            OrderList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, OrderList.from_dictionary)

        return decoded

    def api_v_2_portfolios_orders_destroy(self,
                                          portfolio_uuid,
                                          uuid):
        """Does a DELETE request to /api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/.

        Cancel or request cancellation to the broker

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_portfolios_performance_mwrr_list(self,
                                                 portfolio_uuid,
                                                 date_after=None,
                                                 date_before=None,
                                                 limit=None,
                                                 offset=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/performance/mwrr/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            date_after (date, optional): TODO: type description here.
            date_before (date, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedPortfolioPerformanceList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/performance/mwrr/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'date_after': date_after,
            'date_before': date_before,
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedPortfolioPerformanceList.from_dictionary)

        return decoded

    def api_v_2_portfolios_performance_positions_list(self,
                                                      portfolio_uuid,
                                                      limit=None,
                                                      offset=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/performance/positions/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedPortfolioPerformancePositionsList: Response from the
                API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/performance/positions/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedPortfolioPerformancePositionsList.from_dictionary)

        return decoded

    def api_v_2_portfolios_performance_twrr_list(self,
                                                 portfolio_uuid,
                                                 date_after=None,
                                                 date_before=None,
                                                 limit=None,
                                                 offset=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/performance/twrr/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            date_after (date, optional): TODO: type description here.
            date_before (date, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedPortfolioPerformanceList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/performance/twrr/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'date_after': date_after,
            'date_before': date_before,
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedPortfolioPerformanceList.from_dictionary)

        return decoded

    def api_v_2_portfolios_rebalances_list(self,
                                           portfolio_uuid,
                                           limit=None,
                                           offset=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/rebalances/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedRebalanceList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/rebalances/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedRebalanceList.from_dictionary)

        return decoded

    def api_v_2_portfolios_rebalances_retrieve(self,
                                               portfolio_uuid,
                                               uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/rebalances/{uuid}/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            Rebalance: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/rebalances/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Rebalance.from_dictionary)

        return decoded

    def api_v_2_portfolios_restrictions_retrieve(self,
                                                 portfolio_uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/restrictions/.

        Allow aggregate/group fields of the ModelView model or its related
        entities.
           Query params should use dot notation.
        Requires:
            ListModelMixin (ListAPIView, ListCreateApiView)
        Args:
            * aggregatable_fields (dict): optional.
                Keys: fields that allow aggregation (including related
                entities with "__" notation).
                Values: django qs functions or aggregate_fns
                Example:
                    aggregatable_fields = {
                        'allocations__balance': [Sum, Avg],
                    }
            * groupable_fields (list): optional. fields that allow grouping
            (including related entities with "__" notation).
                Example:
                    groupable_fields = ['portfolio__portfolio_type']
        Query Param Examples:
            >>> ?group_by=portfolio.portfolio_type
            >>> ?aggregate[Sum]=portfolio.allocations.balance
            >>>
            ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balan
            ce

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.

        Returns:
            PortfolioTypeRestrictions: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/restrictions/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PortfolioTypeRestrictions.from_dictionary)

        return decoded

    def api_v_2_portfolios_withdrawals_list(self,
                                            portfolio_uuid,
                                            limit=None,
                                            offset=None,
                                            status=None):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/withdrawals/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.
            status (list of Status14bEnum, optional): TODO: type description
                here.

        Returns:
            PaginatedInvestorWithdrawalListList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/withdrawals/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset,
            'status': status
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedInvestorWithdrawalListList.from_dictionary)

        return decoded

    def api_v_2_portfolios_withdrawals_create(self,
                                              portfolio_uuid,
                                              uuid,
                                              amount,
                                              provider,
                                              status,
                                              reason,
                                              completed,
                                              withdrawal_type,
                                              purpose=None,
                                              extra_data=None):
        """Does a POST request to /api/v2/portfolios/{portfolio_uuid}/withdrawals/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            amount (float): TODO: type description here.
            provider (string): TODO: type description here.
            status (Status14bEnum): TODO: type description here.
            reason (string): Cancelled reason
            completed (datetime): TODO: type description here.
            withdrawal_type (string): TODO: type description here.
            purpose (string, optional): Withdrawal reason
            extra_data (dict, optional): Additional withdrawal attributes for
                the specific portal

        Returns:
            InvestorWithdrawalCreate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/withdrawals/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'uuid': uuid,
            'amount': amount,
            'provider': provider,
            'status': status,
            'reason': reason,
            'completed': APIHelper.when_defined(APIHelper.RFC3339DateTime, completed),
            'withdrawal_type': withdrawal_type,
            'purpose': purpose,
            'extra_data': extra_data
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, InvestorWithdrawalCreate.from_dictionary)

        return decoded

    def api_v_2_portfolios_withdrawals_retrieve(self,
                                                portfolio_uuid,
                                                uuid):
        """Does a GET request to /api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            WithdrawalDetail: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, WithdrawalDetail.from_dictionary)

        return decoded

    def api_v_2_portfolios_withdrawals_destroy(self,
                                               portfolio_uuid,
                                               uuid):
        """Does a DELETE request to /api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/.

        TODO: type endpoint description here.

        Args:
            portfolio_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio_uuid': {'value': portfolio_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_portfolios_allocations_history_retrieve(self,
                                                        portfolio):
        """Does a GET request to /api/v2/portfolios/{portfolio}/allocations/history/.

        Allocations History for a given portfolio
        It accepts two optional parameters, `date_to` and `date_from` to
        limit
        the daily allocations to a certain data range. If they are not given,
        all the
        allocations are returned.
        ---
        ## Parameters:
         * **name**: `date_from`
         * **description**: The initial date.
         * **parameter type**: query param
         * **name**: `date_from`
         * **description**: The final date.
         * **parameter type**: query param

        Args:
            portfolio (uuid|string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/{portfolio}/allocations/history/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'portfolio': {'value': portfolio, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_portfolios_portfoliotypes_list(self,
                                               limit=None,
                                               offset=None):
        """Does a GET request to /api/v2/portfolios/portfoliotypes/.

        TODO: type endpoint description here.

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedPortfolioTypeList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/portfoliotypes/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedPortfolioTypeList.from_dictionary)

        return decoded

    def api_v_2_portfolios_portfoliotypes_restrictions_list(self,
                                                            code,
                                                            limit=None,
                                                            offset=None):
        """Does a GET request to /api/v2/portfolios/portfoliotypes/{code}/restrictions/.

        TODO: type endpoint description here.

        Args:
            code (string): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedBasePortfolioTypeRestrictionsList: Response from the
                API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/portfolios/portfoliotypes/{code}/restrictions/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'code': {'value': code, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedBasePortfolioTypeRestrictionsList.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_retrieve(self,
                                              uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            RelationshipManager: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RelationshipManager.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_allocations_by_asset_retrieve(self,
                                                                             uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/allocations-by-asset/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            AllocationByAsset: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/allocations-by-asset/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AllocationByAsset.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_asset_concentration_risk_retrieve(self,
                                                                                 uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/asset-concentration-risk/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            AssetConcentrationRisk: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/asset-concentration-risk/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AssetConcentrationRisk.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_aum_retrieve(self,
                                                            uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/aum/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            RelationshipManager: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/aum/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RelationshipManager.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_aum_evolution_retrieve(self,
                                                                      uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/aum-evolution/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            AUMEvoluation: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/aum-evolution/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AUMEvoluation.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_aum_portfolio_risk_retrieve(self,
                                                                           uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/aum-portfolio-risk/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            AUMPortfolioRisk: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/aum-portfolio-risk/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AUMPortfolioRisk.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_client_by_risk_retrieve(self,
                                                                       uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/client-by-risk/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            RelationshipManager: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/client-by-risk/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RelationshipManager.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_client_by_status_retrieve(self,
                                                                         uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/client-by-status/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            RelationshipManager: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/client-by-status/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RelationshipManager.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_client_ranking_retrieve(self,
                                                                       uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/client-ranking/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            ClientRanking: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/client-ranking/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ClientRanking.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_inflows_outflows_retrieve(self,
                                                                         uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/inflows-outflows/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            RelationshipManager: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/inflows-outflows/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RelationshipManager.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_portfolio_risk_performance_retrieve(self,
                                                                                   uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/portfolio-risk-performance/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            RelationshipManager: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/portfolio-risk-performance/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RelationshipManager.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_analytics_total_active_clients_retrieve(self,
                                                                             uuid):
        """Does a GET request to /api/v2/relationship-manager/{uuid}/analytics/total-active-clients/.

        TODO: type endpoint description here.

        Args:
            uuid (uuid|string): TODO: type description here.

        Returns:
            RelationshipManager: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/{uuid}/analytics/total-active-clients/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RelationshipManager.from_dictionary)

        return decoded

    def api_v_2_relationship_manager_me_retrieve(self):
        """Does a GET request to /api/v2/relationship-manager/me/.

        TODO: type endpoint description here.

        Returns:
            RelationshipManager: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/relationship-manager/me/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, RelationshipManager.from_dictionary)

        return decoded

    def api_v_2_report_statements_list(self,
                                       client_uuid,
                                       format=None,
                                       limit=None,
                                       offset=None):
        """Does a GET request to /api/v2/report/statements/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedStatementList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/report/statements/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format,
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedStatementList.from_dictionary)

        return decoded

    def api_v_2_report_statements_retrieve(self,
                                           client_uuid,
                                           uuid,
                                           format=None):
        """Does a GET request to /api/v2/report/statements/{uuid}/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.

        Returns:
            Statement: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/report/statements/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Statement.from_dictionary)

        return decoded

    def api_v_2_report_tax_report_list(self,
                                       client_uuid,
                                       format=None,
                                       limit=None,
                                       offset=None):
        """Does a GET request to /api/v2/report/tax-report/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedTaxReportList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/report/tax-report/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format,
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedTaxReportList.from_dictionary)

        return decoded

    def api_v_2_report_tax_report_retrieve(self,
                                           client_uuid,
                                           uuid,
                                           format=None):
        """Does a GET request to /api/v2/report/tax-report/{uuid}/.

        This mixin implements binary responses.
        It supports PDF and Base64. It can be adapted to any django View that
        implements the retrieve method

        Args:
            client_uuid (uuid|string): TODO: type description here.
            uuid (uuid|string): TODO: type description here.
            format (Format1Enum, optional): TODO: type description here.

        Returns:
            TaxReport: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/report/tax-report/{uuid}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'client_uuid': {'value': client_uuid, 'encode': True},
            'uuid': {'value': uuid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'format': format
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TaxReport.from_dictionary)

        return decoded

    def api_v_2_risk_questions_list(self,
                                    limit=None,
                                    offset=None):
        """Does a GET request to /api/v2/risk/questions/.

        TODO: type endpoint description here.

        Args:
            limit (int, optional): Number of results to return per page.
            offset (int, optional): The initial index from which to return the
                results.

        Returns:
            PaginatedQuestionList: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/risk/questions/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'limit': limit,
            'offset': offset
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PaginatedQuestionList.from_dictionary)

        return decoded

    def api_v_2_verifications_verifier_webhook_create(self,
                                                      action,
                                                      verifier):
        """Does a POST request to /api/v2/verifications/verifier_webhook/{verifier}/{action}/.

        TODO: type endpoint description here.

        Args:
            action (string): TODO: type description here.
            verifier (string): TODO: type description here.

        Returns:
            void: Response from the API. No response body

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/verifications/verifier_webhook/{verifier}/{action}/'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'action': {'value': action, 'encode': True},
            'verifier': {'value': verifier, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def api_v_2_websocket_authentication_ticket_create(self,
                                                       ticket):
        """Does a POST request to /api/v2/websocket/authentication/ticket/.

        TODO: type endpoint description here.

        Args:
            ticket (string): TODO: type description here.

        Returns:
            AuthenticationResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/websocket/authentication/ticket/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'ticket': ticket
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AuthenticationResponse.from_dictionary)

        return decoded

    def api_v_2_websocket_authorize_create(self,
                                           ticket):
        """Does a POST request to /api/v2/websocket/authorize/.

        TODO: type endpoint description here.

        Args:
            ticket (string): TODO: type description here.

        Returns:
            Response: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/websocket/authorize/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'ticket': ticket
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Response.from_dictionary)

        return decoded

    def api_v_2_websocket_authorize_asset_create(self,
                                                 ticket):
        """Does a POST request to /api/v2/websocket/authorize/asset/.

        TODO: type endpoint description here.

        Args:
            ticket (string): TODO: type description here.

        Returns:
            Response: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/websocket/authorize/asset/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'ticket': ticket
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Response.from_dictionary)

        return decoded

    def api_v_2_websocket_authorize_portfolio_create(self,
                                                     ticket):
        """Does a POST request to /api/v2/websocket/authorize/portfolio/.

        TODO: type endpoint description here.

        Args:
            ticket (string): TODO: type description here.

        Returns:
            Response: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/websocket/authorize/portfolio/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'ticket': ticket
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Response.from_dictionary)

        return decoded

    def api_v_2_websocket_on_subscribe_create(self,
                                              id,
                                              subscription):
        """Does a POST request to /api/v2/websocket/on_subscribe/.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.
            subscription (string): TODO: type description here.

        Returns:
            Subscribe: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/websocket/on_subscribe/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'id': id,
            'subscription': subscription
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Subscribe.from_dictionary)

        return decoded

    def api_v_2_websocket_on_unsubscribe_create(self,
                                                id,
                                                subscription):
        """Does a POST request to /api/v2/websocket/on_unsubscribe/.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.
            subscription (string): TODO: type description here.

        Returns:
            Unsubscribe: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/websocket/on_unsubscribe/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'id': id,
            'subscription': subscription
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, Unsubscribe.from_dictionary)

        return decoded
