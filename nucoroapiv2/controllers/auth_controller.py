# -*- coding: utf-8 -*-

"""
nucoroapiv2

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from nucoroapiv2.api_helper import APIHelper
from nucoroapiv2.configuration import Server
from nucoroapiv2.controllers.base_controller import BaseController
from nucoroapiv2.models.impersionation_response import ImpersionationResponse
from nucoroapiv2.models.jwt_response import JWTResponse
from nucoroapiv2.models.onboarding_response import OnboardingResponse
from nucoroapiv2.models.password_reset import PasswordReset
from nucoroapiv2.models.password_update import PasswordUpdate
from nucoroapiv2.models.password_reset_request import PasswordResetRequest
from nucoroapiv2.models.jwt_refresh_response import JWTRefreshResponse


class AuthController(BaseController):

    """A Controller to access Endpoints in the nucoroapiv2 API."""

    def __init__(self, config, call_back=None):
        super(AuthController, self).__init__(config, call_back)

    def auth_impersonation_token(self,
                                 impersonator,
                                 impersonated,
                                 token):
        """Does a POST request to /api/v2/auth/impersonation_token/.

        API View that receives an impersonation token and check its validity
        Returns a JSON Web Token that can be used for authenticated (and
        restricted) requests.

        Args:
            impersonator (string): TODO: type description here.
            impersonated (string): TODO: type description here.
            token (string): TODO: type description here.

        Returns:
            ImpersionationResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/auth/impersonation_token/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'impersonator': impersonator,
            'impersonated': impersonated,
            'token': token
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ImpersionationResponse.from_dictionary)

        return decoded

    def auth_login(self,
                   username,
                   password,
                   captcha=None):
        """Does a POST request to /api/v2/auth/login/.

        API View that receives a POST with a user's username and password.
        Returns a JSON Web Token that can be used for authenticated requests.

        Args:
            username (string): TODO: type description here.
            password (string): TODO: type description here.
            captcha (string, optional): TODO: type description here.

        Returns:
            JWTResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/auth/login/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'username': username,
            'password': password,
            'captcha': captcha
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, JWTResponse.from_dictionary)

        return decoded

    def auth_get_onboarding_token(self,
                                  email,
                                  token):
        """Does a POST request to /api/v2/auth/onboarding_token/.

        API View that receives a onboarding token and check its validity
        Returns a JSON Web Token that can be used for authenticated requests.

        Args:
            email (string): TODO: type description here.
            token (string): TODO: type description here.

        Returns:
            OnboardingResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/auth/onboarding_token/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'email': email,
            'token': token
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, OnboardingResponse.from_dictionary)

        return decoded

    def user_set_password(self,
                          email,
                          token,
                          password):
        """Does a POST request to /api/v2/auth/password/.

        Set a new password for an user

        Args:
            email (string): TODO: type description here.
            token (string): TODO: type description here.
            password (string): TODO: type description here.

        Returns:
            PasswordReset: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/auth/password/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'email': email,
            'token': token,
            'password': password
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PasswordReset.from_dictionary)

        return decoded

    def user_change_password(self,
                             new_password,
                             old_password=None):
        """Does a PUT request to /api/v2/auth/password/.

        Change password for an user

        Args:
            new_password (string): TODO: type description here.
            old_password (string, optional): TODO: type description here.

        Returns:
            PasswordUpdate: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/auth/password/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'new_password': new_password,
            'old_password': old_password
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PasswordUpdate.from_dictionary)

        return decoded

    def user_request_password_reset(self,
                                    email=None):
        """Does a PATCH request to /api/v2/auth/password/.

        Request a password reset

        Args:
            email (string, optional): TODO: type description here.

        Returns:
            PasswordResetRequest: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/auth/password/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'email': email
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PasswordResetRequest.from_dictionary)

        return decoded

    def auth_resfresh_jwt_token(self,
                                refresh):
        """Does a POST request to /api/v2/auth/token_renewal/.

        API View that receives a POST with a refresh token as token.
        Returns a refreshed JSON Web Token that can be used for authenticated
        requests.

        Args:
            refresh (string): TODO: type description here.

        Returns:
            JWTRefreshResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/api/v2/auth/token_renewal/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'refresh': refresh
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=_form_parameters)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, JWTRefreshResponse.from_dictionary)

        return decoded
